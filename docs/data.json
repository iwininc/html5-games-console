{
    "project": {},
    "files": {
        "src/console-js/modules/ads.js": {
            "name": "src/console-js/modules/ads.js",
            "modules": {},
            "classes": {
                "iConsole.ads": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/console-js/modules/game.js": {
            "name": "src/console-js/modules/game.js",
            "modules": {},
            "classes": {
                "GettingStarted": 1,
                "iConsole.game": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/console-js/modules/iap.js": {
            "name": "src/console-js/modules/iap.js",
            "modules": {},
            "classes": {
                "iConsole.iap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/console-js/modules/periodical.js": {
            "name": "src/console-js/modules/periodical.js",
            "modules": {},
            "classes": {
                "iConsole.periodical": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "iConsole.ads": {
            "name": "iConsole.ads",
            "shortname": "iConsole.ads",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/ads.js",
            "line": 2,
            "description": "Adverts\n-------\nAdverts are controlled by the game_details.json file located in the root of game.\n\nTODO documentation w.r.t. game_details.json configuration\n\nTypes\n-----\n+ 'none' No adverts\n+ 'interstitial' Always show ads\n+ 'levelStarted' dependant on 'level' numbers defined in the section \n+ 'max_time' displays when 'maxseconds' has expired between calls.\n+ 'every_attempt' displays at everyattempt from 'start' count then ever 'between' count",
            "type": "{iConsole.ads|*|{}}"
        },
        "GettingStarted": {
            "name": "GettingStarted",
            "shortname": "GettingStarted",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/game.js",
            "line": 1,
            "description": "Getting Started\n---------------\nWelcome to the documentation for developing games for the iWin Games Console.\n\nQuick Start\n----------- \nTo get started quickly please read through the step by step guide here\n[https://github.com/iwininc/html5-games-console](https://github.com/iwininc/html5-games-console)\n\nTo see some games already in production using the iWin Games Console please visit\n- JewelQuest [http://m.iwin.com/game/match3/puzzle-match3-jewelquest]\n- S'more Words [http://m.iwin.com/game/puzzle/smorewords]\n- Yukon Solitaire [http://m.iwin.com/game/casual/solitairequestklondike]\n\nNotes on Improving Game Performance\n-----------------------------------\n+ Only load the required assets at startup and load level specific assets as they are needed.\n+ Think about using JPEGs rather than PNGs (if you can)\n+ Use compressed image file types\n+ Reduce the bit rate for audio files.\n+ When pre-compiling data structures, consider breaking the computation blocks into smaller chunks and use timed callbacks to step through these chunks. This will ensure that the console gains some of the CPU time to ensure it can update the UI accordingly, and ensure that the browser doesn't consider the process to have died because it hasn't completed the call in a timely manner",
            "type": "{GettingStarted|*{}}"
        },
        "iConsole.game": {
            "name": "iConsole.game",
            "shortname": "iConsole.game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/game.js",
            "line": 28,
            "description": "Game\n---------------\n\nAs your game loads, you will integrate notification calls to the console to notify it of progress.\nTypically this is done when pre-loading assets required for the game.\n\nOnce the game assets have been fully loaded, the game will notify the console that the game has finished loading.\nThe console will do any necessary work, such as dismissing pre-roll advert panels (if configured and after minimum advert duration has been reached).\n\nAdditional API calls can then be used.",
            "type": "{iConsole.game|*|{}}"
        },
        "iConsole.iap": {
            "name": "iConsole.iap",
            "shortname": "iConsole.iap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/iap.js",
            "line": 3,
            "description": "In App Purchases\n----------------\nThe iWin Games Console supports external In App Purchase providers, all accessible through a single API call,\nwhich means that as a developer, you only need to write support for In App Purchases in one way, to gain support for\nmultiple providers and any future integrations with other IAP providers will continue to be obfuscated behind this\nsingle call.\n\nCurrently Supported Platforms\n-----------------------------\n* Amazon HTML5 App Store\n* Games.com\n* Yahoo Games Network\n\nConfiguration\n-------------\nYou will need to update the game_details.json file, to have an \"iap\" object at the root, and this should contain a\nmapping of sku to an object which describes that sku:\n<pre>\n    \"iap\": {\n      \"com.iwin.more-time\" : {\n          \"name\": \"Get More Time\",\n          \"description\": \"Get More Time\",\n          \"icon\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\",\n          \"currency\": \"usd\",\n          \"amount\": \"0.99\",\n          \"foo\": \"bar\"\n      },\n      \"com.iwin.more-moves\" : {\n          \"name\": \"Get More Moves\",\n          \"description\": \"Get More Moves\",\n          \"icon\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\",\n          \"currency\": \"usd\",\n          \"amount\": \"0.99\",\n          \"foo\": \"bar\"\n      },\n      \"com.iwin.more-midas\" : {\n          \"name\": \"Get More Midas Touches\",\n          \"description\": \"Get More Midas Touches\",\n          \"icon\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\",\n          \"currency\": \"usd\",\n          \"amount\": \"1.99\",\n          \"foo\": \"bar\"\n      },\n      \"com.iwin.fill-lives\" : {\n          \"name\": \"Fill Lives\",\n          \"description\": \"Fill Lives\",\n          \"icon\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\",\n          \"currency\": \"usd\",\n          \"amount\": \"0.99\",\n          \"foo\": \"bar\"\n      }\n   }\n</pre>\nCurrently (owing to restrictions from third party providers) the only currency supported is USD, and the amount should be provided as dollar.cents\n\nYou will also need to create an amazon.sdktester.json file in the root of the released game folder, which reflects the same information (just in an amazon specific manner):\n<pre>\n{\n   \"com.iwin.game-levels\" : {\n       \"itemType\" : \"ENTITLED\",\n       \"price\" : \"0.99\",\n       \"title\": \"Unlock All Levels\",\n       \"description\": \"Unlock All Levels\",\n       \"smallIconUrl\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\"\n   },\n   \"com.iwin.more-time\" : {\n       \"itemType\" : \"CONSUMABLE\",\n       \"price\" : \"0.99\",\n       \"title\": \"Get More Time\",\n       \"description\": \"Get More Time\",\n       \"smallIconUrl\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\"\n   },\n   \"com.iwin.more-moves\" : {\n       \"itemType\" : \"CONSUMABLE\",\n       \"price\" : \"0.99\",\n       \"title\": \"Get More Moves\",\n       \"description\": \"Get More Moves\",\n       \"smallIconUrl\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\"\n   },\n   \"com.iwin.more-midas\" : {\n       \"itemType\" : \"CONSUMABLE\",\n       \"price\" : \"1.99\",\n       \"title\": \"Get More Midas Touches\",\n       \"description\": \"Get More Midas Touches\",\n       \"smallIconUrl\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\"\n   },\n   \"com.iwin.fill-lives\" : {\n       \"itemType\" : \"CONSUMABLE\",\n       \"price\" : \"0.99\",\n       \"title\": \"Fill Lives\",\n       \"description\": \"Fill Lives\",\n       \"smallIconUrl\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\"\n   }\n}\n</pre>\n\nIntegration\n-----------\nThe <code>[iConsole.iap](iConsole.iap.html)</code> class is the integration point that developers should use to determine if the IAP platform is supported\n(i.e. that the game is running on a platform that supports IAP or not), and then to make these purchases. Once the configuration is correct, using the IAP\nplatform is quite simple:\n\n<pre>\n// Decorate my game differently if IAP is supported\nif ( <a href=\"iConsole.iap.html#method_isSupported\">iConsole.iap.isSupported()</a> ) {\n   myGame.state.buyMoreLivesEnabled = true;\n   myGame.state.buyMoreMovesEnabled = true;\n}\n\n/**\n * Handler for Buy More Lives button\n *&#47;\nfunction buyMoreLivesClicked() {\n   // We don't need to test to see if IAP is supported. If it isn't supported, this call will call the failed block\n   // After a short delay (i.e. after a setTimeout of 1ms)\n   <a href=\"iConsole.iap.html#method_purchase\">iConsole.iap.purchase('buymorelivessku')</a>\n      .success(purchaseSuccess)\n      .failure(purchaseFailure);\n}\n\n/**\n * Handler for when a purchase succeeds\n *&#47;\nfunction purchaseSuccess(sku) {\n   switch (sku) {\n      case 'buymorelivessku':\n         myGame.state.lives += 5;\n         break;\n      case 'buymoremovessku':\n         myGame.state.moves += 10;\n         break;\n   }\n}\n/**\n * Handler for when a purchase succeeds\n *&#47;\nfunction purchaseFailure(sku) {\n   console.log('Purchase failed for sku=' + sku );\n}\n</pre>\n\nLaunching / Testing\n-------------------\nNormally, a console enabled game is launched (on a local development server, with host file entry of\n<code>127.0.0.1 local.games.iwin.com</code>) with\n[http://local.games.iwin.com/#/game/](http://local.games.iwin.com/#/game/) where the folder after the # symbol tells\nthe console where to laod the game from. You can append on to this URL, the following\n* &#35;!amazon to enable Amazon integration\n * [http://local.games.iwin.com/#/game/#!amazon](http://local.games.iwin.com/#/game/#!amazon)\n* &#35;!gamescom to enable Games.com integration\n * [http://local.games.iwin.com/#/game/#!gamescom](http://local.games.iwin.com/#/game/#!gamescom)\n* &#35;!yahoo to enable Yahoo integration\n * [http://local.games.iwin.com/#/game/#!yahoo](http://local.games.iwin.com/#/game/#!yahoo)\n\n### Amazon\nThis is the simplest integration to test, as it works out of the box, and does not require any special work-arounds\nor notes. In App Purchases complete when you attempt them without costing real money.\n### Games.com\nThe games.com integration requires you to configure a HTML5 game in [http://developer.games.com](http://developer.games.com)\nand to insert this link (for initial testing purposes) in the externally hosted URL. Also, their In App Purchasing\nopens up a pop-up window which may be automatically blocked (which means your purchases will fail), so be aware of\nthis issue. When making a purchase, you can use the magic credit card 4444444444444448 (with any other value for the\nrest of the fields).\n### Yahoo\nYou will need to set up an externally hosted Canvas game in the Yahoo development. The remainder of this integration\nremains un-documented.\n\nFurther Platform Integration\n----------------------------\nBeyond In-App-Purchasing, these platforms also offer other services, which are supported by the Console:\n### Amazon\n* amazonmotiongesturetilt - When on a Fire Phone, you can tilt the phone around it's Y axis, which Amazon request is used\nto hide any menus. This has been exposed in the iConsole as:\n<pre><a href=\"iConsole.game.html#method_onEvent\">iConsole.game.onEvent('tiltYaxis', function(...){...});</a></pre>\n* Home widget label - When the App is installed onto an Amazon device, it has space for a label below the icon on the\nhome screen. Typically, this can be used to provide contextual information about the user's progress in the game, such\nas which level they are on. This is available as:\n<pre><a href=\"iConsole.game.html#method_setHomeWidgetLabel\">iConsole.game.setHomeWidgetLabel('Continue playing from level 9');</a></pre>\n\n### Games.com\n* All user data is stored on the Games.com servers rather than the iWin Servers",
            "type": "{iConsole.iap|*|{}}"
        },
        "iConsole.periodical": {
            "name": "iConsole.periodical",
            "shortname": "iConsole.periodical",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/periodical.js",
            "line": 2,
            "description": "Periodical\n-------\nPeriodical game data (i.e. daily games) payload handling via the console.\n\nPeriodical files should be stored in a folder call periodical inside the parent of the game directory... i.e.\nin the folder beside site-console:\n   + game\n   + periodical\n   + site-console\n   ...\n\nWhen the game is released onto production, this folder sits alongside the\nversions of the game\n   + periodical\n   + v_72\n   + v_73\n   ...\n\nInside the periodical folder, should be a file periodical.json. It should contain in the root of the JSON, an\narray called \"periods\", which is an array of objects. Each of these objects should have at least a \"name\", a\n\"date\" in YYYYMMDD format, and a \"json\" which is a local reference to a given periods actual data file. You can\nprovide further details such as a thumbnail image here, but the data in this file should be kept to a minimum for\nonly information that is necessary to allow the user to choose the period The referenced JSON file should be used\nto store all the information about what the game needs to present a given perioids data.\nperiodical.json:\n<pre>\n{\n   \"periods\": [\n\t\t{\n           \"json\": \"daily-test-140905-1.json\",\n\t\t\t\"name\": \"Test A\",\n\t\t\t\"date\": \"20140701\"\n       },\n       {\n           \"json\": \"daily-test-140905-2.json\",\n\t\t\t\"name\": \"Test B\",\n\t\t\t\"date\": \"20140630\"\n       },\n       {\n           \"json\": \"daily-test-140905-3.json\",\n\t\t\t\"name\": \"Test C\",\n\t\t\t\"date\": \"20140629\"\n       }\n   ]\n}\n</pre>\nThe data format for each periods json file is entirely at the games discretion, however, you are strongly\nrecommended to have a \"periodical\" object at the root of each periods data, and this should include everything\nyou need to represent this game to allow the user to choose that period (for example, the name of the puzzle,\na picture of that puzzle etc...). We have a process to take source data and convert this into data suited for\nlong life caching and better user browser performance, and it can automatically generate the parent periodical.json\nfile, and uses the \"periodical\" block in each periods data to generate the \"name\" and other data attributes\nneeded.\n\nOnce you have periodical data, you will need to alter the game_details.json file to have   <br/>\n\"periodical\": true   </br>\nset, in order for the console to consider your game a candidate for enabling periodical data (improper setting\nof this value either results in a volume of 404s, or periodical functions not working).\n\nInside the game, you can call:<pre>\niConsole.periodical.getPeriods().result( function( periodData ) {\n   // ...\n});\n</pre>\nWhich will return you the basic objects from the periodical.json file, including name and date (and any data you\nhave injected there).\n\nYou should use this data to allow the user to choose a period to play, and you should obtain an index from this\narray that the user has chosen. In order to download that data, you should then call:<pre>\niConsole.periodical.getData( indexInArrayThatWasChosen ).result( function( data ) {\n   // ...\n});\n</pre>\nIf any of your data contains URLs to assets relative to that periods data, such as images, you should call:<pre>\nvar realURItoCall = iConsole.periodical.getFileURI('myImage.jpg');\n</pre>\nprior to attempting to load these assets. This ensures that the correct location for these assets are used",
            "type": "{iConsole.periodical|*|{}}"
        }
    },
    "classitems": [
        {
            "file": "src/console-js/modules/ads.js",
            "line": 29,
            "description": "In order to flag an advert to potentially be shown, you call this function with appropriate data blocks as\ndefined below. You should pause your game play and mute any sound/music whilst the advert is displayed.\nYou will be notified via the <code>result</code> callback once the console has completed its advert display process.\nAt this point you should un mute and un pause your game.\n<br>\nIf you declare your data type to be <code>interstitial</code>, then the advert (currently) will be triggered\nalways. If you declare your data type to be <code>levelStarted</code>, then the advert may or may not fire\nbased upon the behaviour defined in the <code>game_details.json</code> file. If the advert isn't fired, the\n<code>result</code> is fired immediately. In this case, any code appearing on lines after this call will be\ncalled after the <code>result</code> callback is fired, whereas if the advert is fired, any code appearing on\nlines after this call will be called before the <code>result</code> is fired. Therefore, you should consider\npausing all game execution prior to this call, and leave this as the last call to make.",
            "params": [
                {
                    "name": "data",
                    "description": "An object which contains either\n<pre>\n{\n   type: 'interstitial'\n}\n</pre>\nto fire interstitial adverts all the time, or:\n<pre>\n{\n   type: 'levelStarted',\n   level: num\n}\n</pre>\nwhere <code>num</code> is the level number as an integer that the user is about to start playing. In this\ninstance the advert display behaviour is guided by the <code>game_details.json</code> file.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when the advert is dismissed. The format of result function is\n<pre>result( callbackFunction );</pre>\nWhere callbackFunction is a function that will be called with a single parameter, an object that currently is\nempty, when the advert has dismissed.",
                "type": "Object"
            },
            "example": [
                "\n<pre>\niConsole.ads.show( {\n   type: 'levelStarted',\n   level: 3\n} ).result( function( resultData ) {\n   myGame.startGameTimer();\n} );\n</pre>"
            ],
            "itemtype": "method",
            "name": "show",
            "class": "iConsole.ads"
        },
        {
            "file": "src/console-js/modules/ads.js",
            "line": 77,
            "description": "If your game has been configured to use mid game adverts (adverts that interrupt the users game play), then\nyou should register callbacks to determine when the console is about to show an advert. This will enable you\nto prepare the game in a paused state, pausing timers, fading screens down, waiting for the user to release\ntheir finger or mouse if it is depressed etc... and then notify the console that your game is in a state to\nsafely display adverts without impacting the user.\nYou can register multiple callbacks which will be fired (the order of which is not guaranteed), but one and\nonly one of these callbacks *MUST* fire the <pre>.result</pre> function.",
            "params": [
                {
                    "name": "callbackFunctionToRegister",
                    "description": "The function that you want to register to be called when the\nconsole is going to display an advert mid game. This function will be called with one parameter, an object\nwhich has a <pre>.result</pre> function that you should call when your game is ready to relinquish control to\nthe console for the advert",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the value of <pre>this</pre> that will be applied to the function if necessary.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<pre>\nvar myMidGameAdvertStartedCallback = function( request ) {\n    this.pause();\n    this.fadeDown();\n    this.waitForMouseUp(function() {\n        request.result();\n    });\n};\niConsole.ads.registerMidGameAdvertStartedListener( myMidGameAdvertStartedCallback, this );\n</pre>"
            ],
            "class": "iConsole.ads"
        },
        {
            "file": "src/console-js/modules/ads.js",
            "line": 106,
            "description": "If your game has been configured to use mid game adverts, the you should also register callbacks to have the\nconsole notify you that the advert has finished displaying, and that the console has relinquished control\nback to the game. This will enable you to display a resume countdown timer, fade the screen back up etc...",
            "params": [
                {
                    "name": "callbackFunctionToRegister",
                    "description": "The function that you want to register to be called when the\nconsole has relinquished control back to the game after the advert has completed. This function will be\ncalled without any parameters, as there is no need to notify the console that the game is continuing, the\nconsole assumes that once this request has been sent, the game is back in control.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the value of <pre>this</pre> that will be applied to the function if necessary.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<pre>\nvar myMidGameAdvertFinishedCallback = function( ) {\n    this.startResumeGameCountDownTimers();\n    this.fadeUp();\n};\niConsole.ads.registerMidGameAdvertFinishedListener( myMidGameAdvertFinishedCallback, this );\n</pre>"
            ],
            "class": "iConsole.ads"
        },
        {
            "file": "src/console-js/modules/ads.js",
            "line": 128,
            "description": "If your game supports mid game adverts, and you are applying these calls across multiple classes (i.e. each\nlevel is contained in a different class), then you should unregister any callbacks that you have made.\nOtherwise, the callbacks will be fired against all registered listeners and this may result in undesired\nbehaviour or complete crashes.",
            "params": [
                {
                    "name": "callbackFunctionToUnregister",
                    "description": "the previously registered function for\nregisterMidGameAdvertStartedListener to be unregistered",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\niConsole.ads.registerMidGameAdvertStartedListener( this.midgameAdvertStarted, this );\n...\niConsole.ads.unregisterMidGameAdvertStartedListener ( this.midgameAdvertStarted );\n</pre>"
            ],
            "class": "iConsole.ads"
        },
        {
            "file": "src/console-js/modules/ads.js",
            "line": 151,
            "description": "If your game supports mid game adverts, and you are applying these calls across multiple classes (i.e. each\nlevel is contained in a different class), then you should unregister any callbacks that you have made.\nOtherwise, the callbacks will be fired against all registered listeners and this may result in undesired\nbehaviour or complete crashes.",
            "params": [
                {
                    "name": "callbackFunctionToUnregister",
                    "description": "the previously registered function for\nregisterMidGameAdvertFinishedListener to be unregistered",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\niConsole.ads.registerMidGameAdvertFinishedListener( this.midgameAdvertStarted, this );\n...\niConsole.ads.unregisterMidGameAdvertFinishedListener ( this.midgameAdvertStarted );\n</pre>"
            ],
            "class": "iConsole.ads"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 54,
            "description": "This is the first call you need to make in order for the game and the console to start communicating with\neach other. This call will return an object that you'll need to register a callback handler with, that will\nbe triggered after the pre-game advert has dismissed. You will need to prevent game play taking place until\nthis callback has been triggered, otherwise the game will start playing with an advert sat on top.",
            "params": [
                {
                    "name": "data",
                    "description": "An object which declares what functions you support. If you support these functions\nyou should declare them as function:true... i.e. <pre>{ soundOnOff: true }</pre>. If you do not support these\nfunctions, then you do not need to declare them, as they are assumed to be unsupported.\nAllowable values are:\n* soundOnOff - Your game will register event handlers for soundOn and soundOff and handle appropriately\n* pauseable - Your game will register event handlers for pause and resume and handle appropriately\n* restartable - Your game will register event handlers for restart and handle appropriately",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when the advert is dismissed. The format of result function is\n<pre>result( callbackFunction );</pre>\nWhere callbackFunction is a function that will be called with a single parameter, an object that contains a\nkey <code>user</code> that is an object of the user data.",
                "type": "Object"
            },
            "example": [
                "\n<pre>\niConsole.game.ready({\n   soundOnOff: true,\n   pauseable: true\n}).result( function( resultData ) {\n   myGame.showHomeScreenMenu(resultData.user);\n} );\n</pre>"
            ],
            "itemtype": "method",
            "name": "ready",
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 86,
            "description": "While the game is loading all of it's assets, you should call this frequently to notify the user (via the\npre-game advert progress bar) of the game's loading progress. Typically games will pre-load the image /\naudio assets needed for the menu and first level of the game. Games may also use this time to pre-compile any\ndata blocks that may require a degree of time to complete",
            "params": [
                {
                    "name": "data",
                    "description": "an object contains mappings to:\n<br><code>progress</code> a floating point number from 0 to 1 that indicates the progress the game is making\nin preparing the game for presentation ot the user. At 1 (i.e. 100%) the game should be in a state (once the\npre-game advert has been dismissed) where the user can play or view a menu screen with no further loading\nscreens.\n<br><code>file</code> a string containing the file asset you are loading, or it can be a debug message to\nindicate what you are processing. If debug is enabled in the javascript console, the console will log out the\ngame loading percentage and this file name/message",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The return object is not needed."
            },
            "example": [
                "\n<pre>\niConsole.game.loadProgress( {\n   progress: 0.37,\n   file: 'music/background_music.mp3'\n} );\n</pre>"
            ],
            "itemtype": "method",
            "name": "loadProgress",
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 113,
            "description": "Once the game has finished loading all of it's assets you should call this method to notify the console that\nyou have completed loading of all game assets and pre-compilation. This is in addition to making an\n<code>iConsole.game.loadProgress( { progress: 1, file: '' } );</code> call. This call to\n<code>iConsole.game.loaded</code> indicates to the console that it should allow the user to dismiss the\npre-game advert (once the minimum advert time has passed), or if the maximum advert time has passed to\nimmediately dismiss the pre-game advert. This call will ultimately result in the callback function in\n<code>iConsole.game.ready</code> to be called.",
            "params": [
                {
                    "name": "data",
                    "description": "either:\n<pre>\n{\n   success: true\n}\n</pre>\nindicating that the game has successfully loaded, or\n<pre>\n{\n   success: false,\n   item: 'The item that caused the game to fail loading',\n   text: 'Any debug information that may help understand why the game failed to load'\n}\n</pre>\nindicating that the game failed to load, where item and text are both strings that are used to identify to\nthe console and developer why the game failed to load.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The return object is not needed.",
                "type": "*"
            },
            "example": [
                "\n<pre>\niConsole.game.loaded( {\n   success: true\n} );\n</pre>",
                "\n<pre>\niConsole.game.loaded( {\n   success: false,\n   item: 'audio/background_music.mp3',\n   text: 'Error fetching file'\n} );\n</pre>"
            ],
            "itemtype": "method",
            "name": "loaded",
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 158,
            "description": "This call should be made prior to starting a level, to obtain any data that the game has previously stored\nfor the level about to be played. This is useful to allow a user to continue game progress where they left\noff. Examples of this can include fetching the data of a previous level (to indicate what items a user has\nin their in-game inventory). This is an asynchronous call, as the data may need to be fetched from a back-end\nserver, thus the data is passed into a callback function that you must supply to the result function in the\nreturned object.\nYou should also make a call to <code>iConsole.ads.show</code> with the type set to <code>levelStarted</code>\nas well, and wait for both callbacks to complete before continuing on with the game. Suggested order would\nbe to call <code>iConsole.ads.show</code> first, and then call <code>iConsole.game.getLevelData</code> to\nensure that the user is presented with something that is the game just waiting, and only proceed once both\nof these functions have triggered their callback functions.",
            "params": [
                {
                    "name": "data",
                    "description": "\n<pre>\n{\n   level: <integer>\n}\n</pre>\nwhere the level number is any integer from -2147483647 to 2147483647 (-2147483648 is specially reserved)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when the user's level data is returned. The format of result function is\n<pre>result( callbackFunction );</pre>\nWhere callbackFunction is a function that will be called with a single parameter, an object that contains a\nkey <code>data</code> that is an object of the users data. Any other data other than the <code>data</code>\nthat may be returned in this object block is deprecated and should not be relied upon.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getLevelData",
            "example": [
                "\n<pre>\niConsole.game.getLevelData( { level: 23 } ).result( function ( resultData ) {\n   myGame.decipherUsersLevelInformation( resultData.data );\n} );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 195,
            "description": "This call should be made to store progress of a level (typically at the end of a level) via a 2k data string.\nThis is useful to allow a user to continue game progress where they left off or to restart previously failed\nlevels. Whilst this may result in a back-end call, this call can be made and no callback function required to\nhandle the result.",
            "params": [
                {
                    "name": "data",
                    "description": "\n<pre>\n{\n   level: <integer>\n   data: <string of up to 2048 characters>\n}\n</pre>\nwhere the level number is any integer from -2147483647 to 2147483647 (-2147483648 is specially reserved) and\nthe data is a string of up to 2048 characters to store, where the contents of this are freely under the\ncontrol of the game developer.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The return object is not required",
                "type": "*"
            },
            "itemtype": "method",
            "name": "setLevelData",
            "example": [
                "\n<pre>\niConsole.game.setLevelData( {\n   level: 24,\n   data: \"{rockets:2,specials:['trinity','primus']}\"\n} );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 224,
            "description": "This call can be made prior to starting a level or prior to starting a game, to obtain any data that the game\nhas previously stored for the entire game session and any previous information (such as my best score if the\ngame wishes to display that inside its UI). This is useful to allow a user to continue game progress where\nthey left off, for example by storing the current user level. This is an asynchronous call, as the data may\nneed to be fetched from a back-end server, thus the data is passed into a callback function that you must\nsupply to the result function in the returned object.",
            "params": [
                {
                    "name": "data",
                    "description": "not used but provided in case of future API changes",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when the user's game data is returned. The format of result function is\n<pre>result( callbackFunction );</pre>\nWhere callbackFunction is a function that will be called with a single parameter, an object that contains a\nkey <code>data</code> that is an object of the users data. Any other data other than the <code>data</code>\nthat may be returned in this object block is deprecated and should not be relied upon.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getGameData",
            "example": [
                "\n<pre>\niConsole.game.getGameData().result( function ( resultData ) {\n   myGame.decipherUsersGameInformation( resultData.data );\n} );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 250,
            "description": "This call should be made to store progress in a game session (typically at the end of a level) via a 2k data\nstring. This is useful to allow a user to continue game progress where they left off or to restart previously\nfailed levels. Whilst this may result in a back-end call, this call can be made and no callback function\nrequired to handle the result.",
            "params": [
                {
                    "name": "data",
                    "description": "\n<pre>\n{\n   data: <string of up to 2048 characters>\n}\n</pre>\nwhere the level number is any integer from -2147483647 to 2147483647 (-2147483648 is specially reserved) and\nthe data is a string of up to 2048 characters to store, where the contents of this are freely under the\ncontrol of the game developer.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The return object is not required",
                "type": "*"
            },
            "itemtype": "method",
            "name": "setGameData",
            "example": [
                "\n<pre>\niConsole.game.setGameData( {\n   data: \"{currentLevel:24}\"\n} );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 277,
            "description": "This call should be made whenever the game wishes to post a high score for the global leaderboards for the\nuser. In the future, the console may cause a dialog to appear to congratulate the user on their achievement\nand so the game should pause execution until the callback function that should be supplied to the\n<code>result</code> member function of the returned object has been called. Currently, this will be called\nimmediately.",
            "params": [
                {
                    "name": "data",
                    "description": "\n<pre>\n{\n   score: <integer>\n}\n</pre>\nwhere the score is an integer of the users high score they achieved.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when the high score has been posted and any console interaction\nresulting from this has completed. The format of result function is <pre>result( callbackFunction );</pre>\nWhere callbackFunction is a function that will be called with a single parameter, an object that currently\ncontains no data.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "postHighScore",
            "example": [
                "\n<pre>\niConsole.game.postHighScore( {\n   score: 945672\n} ).result( {\n   myGame.changeState(myGame.RESTART_GAME);\n} );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 309,
            "description": "This function should be called when the user has reached the end of a natural gaming session (i.e. they've\nrun out of lives and can not continue). Game play should not be allowed to continue until the result callback\nfunction has been called.",
            "itemtype": "method",
            "name": "gameOver",
            "example": [
                "\n<pre>\niConsole.game.gameOver().result( {\n   myGame.showMenuScreen();\n} );\n</pre>"
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 326,
            "itemtype": "method",
            "name": "levelStarted",
            "deprecated": true,
            "params": [
                {
                    "name": "info",
                    "description": ""
                }
            ],
            "return": {
                "description": "}",
                "type": "Result: result, trigger: trigger"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 365,
            "itemtype": "method",
            "name": "levelFinished",
            "deprecated": true,
            "params": [
                {
                    "name": "info",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 378,
            "description": "The user may generate keydown events when they are typing either in the game or in the console. Where the\nuser is typing into their chat window, keydown events are going to be triggered that games will erroneously\ncatch and handle. Therefore, instead of registering keydown handlers inside the game, you should add a\nhandler to the iConsole instead, which will bubble the keydown events except for when the user is typing into\nfields that shouldn't trigger game interaction, such as the chat window.\nThe currently supported event types are:\n* keydown - When a key is pressed down\n* signedIn - When a user signs in to the console (used to reload the user data from the console and restart the game)\n* signedOut - When a user signs out of the console (used to reload the user data and restart the game)\n* tiltYaxis - When a user tilts their amazon fire phone around the Y axis (used to dismiss menus in game)\n* soundOff - When the console requests to mute all sounds (the game should store the settings of the user overrides, so that if the sound is already muted, a call to soundOn should revert to the user settings)\n* soundOn - When the console requests to unmute all sounds (and where a game supports muting of sound effects and music separately, this should return the sound to the previous settings)\n* pause - When the console requests to pause the game, this should bring up the ingame pause menu (unless the game is not in a pause-able state)\n* resume - When the console requests to resume paused game play, this should unpause any paused game play (unless the game is not in a paused state)\n* restart - Only called if the console has received an iConsole.game.gameOver() call, and signifies that the console wants to do the same effect as the user clicking \"Replay\". However, if the user has already manually done this, then this should do nothing.\nSee iConsole.game.offEvent",
            "itemtype": "method",
            "name": "onEvent",
            "params": [
                {
                    "name": "eventType",
                    "description": "currently, the only supported event type is <code>keydown</code>",
                    "type": "String"
                },
                {
                    "name": "callbackFunction",
                    "description": "a callback function that will be called every time the console determines\na keydown event that should be passed to the game. It will be supplied with a cut down event object, that\ncontains two member variables <code>which</code> and <code>keyCode</code> and a function\n<code>stopPropagation</code> that can be used to prevent bubbling of the event within the game (if your game\nregisters multiple handlers to the console).",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\niConsole.game.onEvent( 'keydown', myGame.keydownHandler );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 428,
            "description": "The user may generate keydown events when they are typing either in the game or in the console. Where the\nuser is typing into their chat window, keydown events are going to be triggered that games will erroneously\ncatch and handle. Therefore, instead of registering keydown handlers inside the game, you should add a\nhandler to the iConsole instead, which will bubble the keydown events except for when the user is typing into\nfields that shouldn't trigger game interaction, such as the chat window. This call will be used to\nde-register the keydown handler.\nSee iConsole.game.onEvent",
            "itemtype": "method",
            "name": "offEvent",
            "params": [
                {
                    "name": "eventType",
                    "description": "currently, the only supported event type is <code>keydown</code>",
                    "type": "String"
                },
                {
                    "name": "callbackFunction",
                    "description": "the callback function that was previously registered with\n<code>iConsole.game.onEvent</code>",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\niConsole.game.offEvent( 'keydown', myGame.keydownHandler );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 465,
            "description": "This function returns the width of the game inside the console, as window.innerWidth will not work initially\nwhen the game is first loaded as the game's window is hidden from display. This function is especially\nuseful when trying to determine what resolution of graphics the game should load.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 482,
            "description": "This function returns the height of the game inside the console, as window.innerHeight will not work initially\nwhen the game is first loaded as the game's window is hidden from display. This function is especially\nuseful when trying to determine what resolution of graphics the game should load.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 499,
            "description": "This function is used to set the label underneath the game's image on Amazon Fire devices (currently), and\nis typically used to relay information such as what level the user is going to resume playback from.",
            "itemtype": "method",
            "name": "setHomeWidgetLabel",
            "params": [
                {
                    "name": "label",
                    "description": "- The label to set"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 510,
            "description": "This function is used to explicitly to hide the console window (the chat and highscore window).",
            "itemtype": "method",
            "name": "hideConsoleWindow",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/iap.js",
            "line": 197,
            "description": "This function should be used to feature detect whether In App Purchasing is available or not.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "iConsole.iap"
        },
        {
            "file": "src/console-js/modules/iap.js",
            "line": 206,
            "description": "This function should be used to initiate an In App Purchase from the containing platform. If the sku doesn't\nexist in the game_details.json, or in amazon's case, configured on their server this function will call the\nfailure callback.",
            "itemtype": "method",
            "name": "purchase",
            "params": [
                {
                    "name": "sku",
                    "description": "The sku item you wish to purchase",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object which contains two functions, success and failure, which should each be called\nwith the function you wish to call when the purchase succeeds or fails. These callbacks will be called a\nsingle parameter, the sku that was attempted to be purchased. These calls can be directly chained:",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n    iConsole.iap.purchase('com.iwin.morelives').success(mySuccessFunction).failure(myFailureFunction);\n</pre>"
            ],
            "class": "iConsole.iap"
        },
        {
            "file": "src/console-js/modules/iap.js",
            "line": 245,
            "description": "This function should be used to feature detect whether external analytics (like Flurry) should be used for\nthe game. Note that if your game presents a different experience for an IAP game versus a non-IAP game, you\nshould store your analytic events accordingly.",
            "itemtype": "method",
            "name": "isAnalyticsSupported",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "iConsole.iap"
        },
        {
            "file": "src/console-js/modules/periodical.js",
            "line": 93,
            "description": "This function should be used to fetch the data for a given number of periods back. This will return exactly\nthe data as it has been stored in the JSON block (but this data may have been modified with filenames being\nchanged to support better caching). The data once loaded is called back in the .result(callback) callback\nfunction.",
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "periodsBack",
                    "description": ""
                }
            ],
            "return": {
                "description": "}",
                "type": "Result: Function"
            },
            "class": "iConsole.periodical"
        },
        {
            "file": "src/console-js/modules/periodical.js",
            "line": 125,
            "description": "This function should be used to fetch the total number of periods of data supported, and any data that is\nnecessary to display these periodicals, such as thumbnails. The data once obtained, is called back in the\n.result(callback) callback function.",
            "return": {
                "description": "}",
                "type": "Result: Function"
            },
            "itemtype": "method",
            "name": "getPeriods",
            "class": "iConsole.periodical"
        },
        {
            "file": "src/console-js/modules/periodical.js",
            "line": 154,
            "description": "If there are any assets which are referenced by the given periodical data, this will not be under the same\ndirectory as the game, and this function should be called to convert a given URI you wish to obtain into a\nURI that can be reached. This should be done for every URL referenced by the periodical data, that is meant\nto be local to the JSON file.",
            "params": [
                {
                    "name": "uri",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getFileURI",
            "class": "iConsole.periodical"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nIf your game has been configured to use mid game adverts (adverts that interrupt the users game play), then\nyou should register callbacks to determine when the console is about to show an advert. This will enable you\nto prepare the game in a paused state, pausing timers, fading screens down, waiting for the user to release\ntheir finger or mouse if it is depressed etc... and then notify the console that your game is in a state to\nsafely display adverts without impacting the user.\nYou can register multiple callbacks which will be fired (the order of which is not guaranteed), but one and\nonly one of these callbacks *MUST* fire the <pre>.result</pre> function.",
            "line": " src/console-js/modules/ads.js:77"
        },
        {
            "message": "Missing item type\nIf your game has been configured to use mid game adverts, the you should also register callbacks to have the\nconsole notify you that the advert has finished displaying, and that the console has relinquished control\nback to the game. This will enable you to display a resume countdown timer, fade the screen back up etc...",
            "line": " src/console-js/modules/ads.js:106"
        },
        {
            "message": "Missing item type\nIf your game supports mid game adverts, and you are applying these calls across multiple classes (i.e. each\nlevel is contained in a different class), then you should unregister any callbacks that you have made.\nOtherwise, the callbacks will be fired against all registered listeners and this may result in undesired\nbehaviour or complete crashes.",
            "line": " src/console-js/modules/ads.js:128"
        },
        {
            "message": "Missing item type\nIf your game supports mid game adverts, and you are applying these calls across multiple classes (i.e. each\nlevel is contained in a different class), then you should unregister any callbacks that you have made.\nOtherwise, the callbacks will be fired against all registered listeners and this may result in undesired\nbehaviour or complete crashes.",
            "line": " src/console-js/modules/ads.js:151"
        }
    ]
}