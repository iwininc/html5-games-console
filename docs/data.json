{
    "project": {},
    "files": {
        "src/console-js/modules/ads.js": {
            "name": "src/console-js/modules/ads.js",
            "modules": {},
            "classes": {
                "iConsole.ads": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/console-js/modules/game.js": {
            "name": "src/console-js/modules/game.js",
            "modules": {},
            "classes": {
                "GettingStarted": 1,
                "iConsole.game": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/console-js/modules/iap.js": {
            "name": "src/console-js/modules/iap.js",
            "modules": {},
            "classes": {
                "iConsole.iap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/console-js/modules/mp.js": {
            "name": "src/console-js/modules/mp.js",
            "modules": {},
            "classes": {
                "iConsole.mp": 1,
                "iConsole.mp.simple": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/console-js/modules/periodical.js": {
            "name": "src/console-js/modules/periodical.js",
            "modules": {},
            "classes": {
                "iConsole.periodical": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/console-js/modules/social.js": {
            "name": "src/console-js/modules/social.js",
            "modules": {},
            "classes": {
                "iConsole.social": 1,
                "iConsole.social.facebook": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "iConsole.ads": {
            "name": "iConsole.ads",
            "shortname": "iConsole.ads",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/ads.js",
            "line": 2,
            "description": "Adverts\n-------\nAdverts are controlled by the game_details.json file located in the root of game.\n\nTODO documentation w.r.t. game_details.json configuration\n\nTypes\n-----\n+ 'none' No adverts\n+ 'interstitial' Always show ads\n+ 'levelStarted' dependant on 'level' numbers defined in the section \n+ 'max_time' displays when 'maxseconds' has expired between calls.\n+ 'every_attempt' displays at everyattempt from 'start' count then ever 'between' count",
            "type": "{iConsole.ads|*|{}}"
        },
        "GettingStarted": {
            "name": "GettingStarted",
            "shortname": "GettingStarted",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/game.js",
            "line": 1,
            "description": "Getting Started\n---------------\nWelcome to the documentation for developing games for the iWin Games Console.\n\nQuick Start\n----------- \nTo get started quickly please read through the step by step guide here\n[https://github.com/iwininc/html5-games-console](https://github.com/iwininc/html5-games-console)\n\nTo see some games already in production using the iWin Games Console please visit\n- JewelQuest [http://m.iwin.com/game/match3/puzzle-match3-jewelquest]\n- S'more Words [http://m.iwin.com/game/puzzle/smorewords]\n- Yukon Solitaire [http://m.iwin.com/game/casual/solitairequestklondike]\n\nNotes on Improving Game Performance\n-----------------------------------\n+ Only load the required assets at startup and load level specific assets as they are needed.\n+ Think about using JPEGs rather than PNGs (if you can)\n+ Use compressed image file types\n+ Reduce the bit rate for audio files.\n+ When pre-compiling data structures, consider breaking the computation blocks into smaller chunks and use timed callbacks to step through these chunks. This will ensure that the console gains some of the CPU time to ensure it can update the UI accordingly, and ensure that the browser doesn't consider the process to have died because it hasn't completed the call in a timely manner",
            "type": "{GettingStarted|*{}}"
        },
        "iConsole.game": {
            "name": "iConsole.game",
            "shortname": "iConsole.game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/game.js",
            "line": 32,
            "description": "Game\n---------------\n\nAs your game loads, you will integrate notification calls to the console to notify it of progress.\nTypically this is done when pre-loading assets required for the game.\n\nOnce the game assets have been fully loaded, the game will notify the console that the game has finished loading.\nThe console will do any necessary work, such as dismissing pre-roll advert panels (if configured and after minimum advert duration has been reached).\n\nAdditional API calls can then be used.",
            "type": "{iConsole.game|*|{}}"
        },
        "iConsole.iap": {
            "name": "iConsole.iap",
            "shortname": "iConsole.iap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/iap.js",
            "line": 4,
            "description": "In App Purchases\n----------------\nThe iWin Games Console supports external In App Purchase providers, all accessible through a single API call,\nwhich means that as a developer, you only need to write support for In App Purchases in one way, to gain support for\nmultiple providers and any future integrations with other IAP providers will continue to be obfuscated behind this\nsingle call.\n\nCurrently Supported Platforms\n-----------------------------\n* Amazon HTML5 App Store\n* Games.com\n* Yahoo Games Network\n\nConfiguration\n-------------\nYou will need to update the game_details.json file, to have an \"iap\" object at the root, and this should contain a\nmapping of sku to an object which describes that sku:\n<pre>\n    \"iap\": {\n      \"com.iwin.more-time\" : {\n          \"name\": \"Get More Time\",\n          \"description\": \"Get More Time\",\n          \"icon\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\",\n          \"currency\": \"usd\",\n          \"amount\": \"0.99\",\n          \"foo\": \"bar\"\n      },\n      \"com.iwin.more-moves\" : {\n          \"name\": \"Get More Moves\",\n          \"description\": \"Get More Moves\",\n          \"icon\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\",\n          \"currency\": \"usd\",\n          \"amount\": \"0.99\",\n          \"foo\": \"bar\"\n      },\n      \"com.iwin.more-midas\" : {\n          \"name\": \"Get More Midas Touches\",\n          \"description\": \"Get More Midas Touches\",\n          \"icon\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\",\n          \"currency\": \"usd\",\n          \"amount\": \"1.99\",\n          \"foo\": \"bar\"\n      },\n      \"com.iwin.fill-lives\" : {\n          \"name\": \"Fill Lives\",\n          \"description\": \"Fill Lives\",\n          \"icon\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\",\n          \"currency\": \"usd\",\n          \"amount\": \"0.99\",\n          \"foo\": \"bar\"\n      }\n   }\n</pre>\nCurrently (owing to restrictions from third party providers) the only currency supported is USD, and the amount should be provided as dollar.cents\n\nYou will also need to create an amazon.sdktester.json file in the root of the released game folder, which reflects the same information (just in an amazon specific manner):\n<pre>\n{\n   \"com.iwin.game-levels\" : {\n       \"itemType\" : \"ENTITLED\",\n       \"price\" : \"0.99\",\n       \"title\": \"Unlock All Levels\",\n       \"description\": \"Unlock All Levels\",\n       \"smallIconUrl\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\"\n   },\n   \"com.iwin.more-time\" : {\n       \"itemType\" : \"CONSUMABLE\",\n       \"price\" : \"0.99\",\n       \"title\": \"Get More Time\",\n       \"description\": \"Get More Time\",\n       \"smallIconUrl\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\"\n   },\n   \"com.iwin.more-moves\" : {\n       \"itemType\" : \"CONSUMABLE\",\n       \"price\" : \"0.99\",\n       \"title\": \"Get More Moves\",\n       \"description\": \"Get More Moves\",\n       \"smallIconUrl\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\"\n   },\n   \"com.iwin.more-midas\" : {\n       \"itemType\" : \"CONSUMABLE\",\n       \"price\" : \"1.99\",\n       \"title\": \"Get More Midas Touches\",\n       \"description\": \"Get More Midas Touches\",\n       \"smallIconUrl\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\"\n   },\n   \"com.iwin.fill-lives\" : {\n       \"itemType\" : \"CONSUMABLE\",\n       \"price\" : \"0.99\",\n       \"title\": \"Fill Lives\",\n       \"description\": \"Fill Lives\",\n       \"smallIconUrl\": \"https://s3-external-1.amazonaws.com/com-amazon-mas-catalog/M1I0LM77RX7FC2%2FM2VC2AJFZBAC93%2Fimages%2F_6b7d1378-12ae-48aa-92e2-618476ab5553_ceb500dbf0e42ce1435155dabebfb8b2\"\n   }\n}\n</pre>\n\nIntegration\n-----------\nThe <code>[iConsole.iap](iConsole.iap.html)</code> class is the integration point that developers should use to determine if the IAP platform is supported\n(i.e. that the game is running on a platform that supports IAP or not), and then to make these purchases. Once the configuration is correct, using the IAP\nplatform is quite simple:\n\n<pre>\n// Decorate my game differently if IAP is supported\nif ( <a href=\"iConsole.iap.html#method_isSupported\">iConsole.iap.isSupported()</a> ) {\n   myGame.state.buyMoreLivesEnabled = true;\n   myGame.state.buyMoreMovesEnabled = true;\n}\n\n/**\n * Handler for Buy More Lives button\n *&#47;\nfunction buyMoreLivesClicked() {\n   // We don't need to test to see if IAP is supported. If it isn't supported, this call will call the failed block\n   // After a short delay (i.e. after a setTimeout of 1ms)\n   <a href=\"iConsole.iap.html#method_purchase\">iConsole.iap.purchase('buymorelivessku')</a>\n      .success(purchaseSuccess)\n      .failure(purchaseFailure);\n}\n\n/**\n * Handler for when a purchase succeeds\n *&#47;\nfunction purchaseSuccess(sku) {\n   switch (sku) {\n      case 'buymorelivessku':\n         myGame.state.lives += 5;\n         break;\n      case 'buymoremovessku':\n         myGame.state.moves += 10;\n         break;\n   }\n}\n/**\n * Handler for when a purchase fails\n *&#47;\nfunction purchaseFailure(sku) {\n   console.log('Purchase failed for sku=' + sku );\n}\n</pre>\n\nLaunching / Testing\n-------------------\nNormally, a console enabled game is launched (on a local development server, with host file entry of\n<code>127.0.0.1 local.games.iwin.com</code>) with\n[http://local.games.iwin.com/#/game/](http://local.games.iwin.com/#/game/) where the folder after the # symbol tells\nthe console where to load the game from. You can append on to this URL, the following\n* &#35;!amazon to enable Amazon integration\n * [http://local.games.iwin.com/#/game/#!amazon](http://local.games.iwin.com/#/game/#!amazon)\n* &#35;!gamescom to enable Games.com integration\n * [http://local.games.iwin.com/#/game/#!gamescom](http://local.games.iwin.com/#/game/#!gamescom)\n* &#35;!yahoo to enable Yahoo integration\n * [http://local.games.iwin.com/#/game/#!yahoo](http://local.games.iwin.com/#/game/#!yahoo)\n\n### Amazon\nThis is the simplest integration to test, as it works out of the box, and does not require any special workarounds\nor notes. In App Purchases complete when you attempt them without costing real money.\n### Games.com\nThe games.com integration requires you to configure a HTML5 game in [http://developer.games.com](http://developer.games.com)\nand to insert this link (for initial testing purposes) in the externally hosted URL. Also, their In App Purchasing\nopens up a pop-up window which may be automatically blocked (which means your purchases will fail), so be aware of\nthis issue. When making a purchase, you can use the magic credit card 4444444444444448 (with any other value for the\nrest of the fields).\n### Yahoo\nYou will need to set up an externally hosted Canvas game in the Yahoo development. The remainder of this integration\nremains undocumented.\n\nFurther Platform Integration\n----------------------------\nBeyond In-App-Purchasing, these platforms also offer other services, which are supported by the Console:\n### Amazon\n* amazonmotiongesturetilt - When on a Fire Phone, you can tilt the phone around it's Y axis, which Amazon request is used\nto hide any menus. This has been exposed in the iConsole as:\n<pre><a href=\"iConsole.game.html#method_onEvent\">iConsole.game.onEvent('tiltYaxis', function(...){...});</a></pre>\n* Home widget label - When the App is installed onto an Amazon device, it has space for a label below the icon on the\nhome screen. Typically, this can be used to provide contextual information about the user's progress in the game, such\nas which level they are on. This is available as:\n<pre><a href=\"iConsole.game.html#method_setHomeWidgetLabel\">iConsole.game.setHomeWidgetLabel('Continue playing from level 9');</a></pre>\n\n### Games.com\n* All user data is stored on the Games.com servers rather than the iWin Servers",
            "type": "{iConsole.iap|*|{}}"
        },
        "iConsole.mp": {
            "name": "iConsole.mp",
            "shortname": "iConsole.mp",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/mp.js",
            "line": 3,
            "description": "Multiplayer\n-----------\nThis API should be used for Multiplayer Games. These Games could be configured to be played head to head,\nor n players in a Lobby Room trying to finish the levels or achieve a highscore or whatever might the game\nconsider a player as a winner. Once the game has made the choice to work in Multiplayer mode, it must\nbehave differently than normal, in such that the game is not listening to a user input for when the game\nshould start, or what type of level to show the user, but instead listen to callbacks from this API as to\nwhen a level should be started.\n\nDuring the progress of a level, the game should regularly report the user's current state (this could be\nevery n seconds, or whenever the score is increased). This is such that it is easier to determine if full\nplay has come in to effect.\n\nThe typical flow would be to:\n1. Register the get state callback <code>iConsole.mp.registerGetState(myStateHandler);</code>, to ensure\nthat your game is notified of when the MP experience has determined the users are about to:\n  * To wait for more players\n  * Start playing\n  * Finish the game (all players should finish)\n  * Wait for a decision to play again\nThe data provided from the Multiplayer server will be in the following format:\n<pre>\n{\n  game_room_id: \"...\",              //internal id of no use to you as a game developer\n  server_time: ...,                   //milliseconds since unix epoch\n  users: [                            //users who are part of this room\n    {\n       id: \"...\",                     //unique id to identify the user\n       nickname: \"...\",               //the nickname of a logged in user or Player#\n       avatar_url: \"...\",             //the avatar url of a logged in user\n       state: { score: 34 },          //state is whatever you pass up\n       type: \"real\",                  //type can be real, guest, voyeur\n       lobby_state: \"waiting\"         //lobby states can be waiting, playing, finished, deciding\n    },\n    { ... },\n    { ... }\n  ]\n}\n</pre>\nExample of the myStateHandler function is:\n<pre>\nmyStateHandler = function (data) {\n\tvar users = data.users;\n\tvar numTotalUsers = users.length;\n\tvar numUsersWaiting = iConsole.mp.getWaitingUsers(users).length;\n\tvar numUsersPlaying = iConsole.mp.getPlayingUsers(users).length;\n\tif (numTotalUsers === 0) {\n\t\t//all users gone - should never really be the case...\n\t\t//game should be in a 'waiting' state\n\t}\n\telse if (myGame.currentState === 'waiting') {\n\t\tif ((numUsersPlaying + numUsersWaiting) < myGame.requiresNumPlayers) {\n\t\t\t//waiting for more users to either join or decide to play again\n\t\t\t//could also echo out numUsersDeciding here\n\t\t\tconsole.log('Waiting for ' + (myGame.requiresNumPlayers - numUsersWaiting) + ' other players to join (or agree to play again)');\n\t\t} else {\n\t\t\t//have enough users we can start now\n\t\t\tconsole.log(\"LOBBY STATUS PLAYING\");\n\t\t\tiConsole.mp.updateUsersLobbyState(iConsole.mp.LOBBY_STATE_PLAYING);\n\t\t\tiConsole.mp.gameStarted({});\n\t\t\tconsole.log('We have enough users to start playing');\n\t\t\t// start the game and set the state to 'playing'\n\t\t}\n\t} else if (myGame.currentState === 'playing') {\n\t\tvar otherPlayers = iConsole.mp.getOtherPlayers(data.users);\n\t\t// do whatever updates you want to scoreboard or progress of other players on the screen\n\t\t// check for end of the game for the current user and if finished set the state to 'finished'\n\t} else if (myGame.currentState === 'finished') {\n\t    // check for the end of the game for all players and set the state to 'over'\n\t\t// update again the progress of other players if the all players game not finished\n\t} else if (myGame.currentState === 'over') {\n\t\t// Wait for all other users to become deciding or waiting to enable a replay of the game\n\t\t// if playing again, should set the state back to 'waiting'\n\n\t}\n}\n</pre>\n\n2. Get the available Rooms for the game. The success function requires a parameter where the rooms will be returned as an Array object.\nRooms object example:\n<pre>\n[{\n     roomName: \"Creepy Federation\",                       //the name of the room\n     gameId: \"example-multiplayer-game\",                  //the game id\n     state: \"game_started\",                               //state of the current room (game_started, waiting, game_finished, locked)\n     roomId: \"example-multiplayer-game-creepyfederation\", //the unique room id that can be used to assign the user to a room\n     usersInRoom\": 2                                      //the number of users currently in the room\n },\n {\n     roomName: \"Fabulous Meeting Place\",\n     gameId: \"example-multiplayer-game\",\n     state: \"waiting\",\n     roomId: \"example-multiplayer-game-fabulousmeetingplace\",\n     usersInRoom: ​0\n }]\n</pre>\nCode example:\n<pre>\nvar myPopulateAvailableRoomsFunction = function(rooms) {\n   $.each(rooms, function (index, room) {\n       // do whatever with room\n   }\n};\niConsole.mp.getAvailableRooms().success(myPopulateAvailableRoomsFunction).failure(failureFunction);\n</pre>\n\n3. Assign the user to a Room.\n<pre>\nvar successFunction = function () {\n    // on success do something\n};\nvar failureFunction = function () {\n    // on failure display message and display menu to try again\n};\n// roomId is taken from the list of rooms when using getAvailableRooms\niConsole.mp.addUserToRoom(roomId).success(successFunction).failure(failureFunction);\n</pre>\nYou can also use the method to automatically assign a user to any room.\ni.e.\n<pre>\nvar successFunction = function () {\n    // on success do something\n};\nvar failureFunction = function () {\n    // on failure display message and display menu to try again\n};\niConsole.mp.autoAssignUserToRoom().success(successFunction).failure(failureFunction);\n</pre>\n\n4. A user can also leave a room using the method <code>iConsole.mp.userLeftRoom().success(successFunction);</code>\nWe can use also this function inside the onbeforeunload event but it's not guaranteed that the user will be removed since\nit's an asynchronous call to the server. Though, in the end, the user will be considered dead after n seconds.\n\nNote: Where a function returns a success and failure function, the success callback will be called when the function\ncompletes (and these calls are Asynchronous). The failure callback will be called if there has been any error in\ntrying to achieve this call, typically will be a failure in communications to the multiplayer server.\n\nPlease see also the Example Multiplayer Game for examples on how to use this API.",
            "type": "{iConsole.mp|*|{}}"
        },
        "iConsole.mp.simple": {
            "name": "iConsole.mp.simple",
            "shortname": "iConsole.mp.simple",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/mp.js",
            "line": 792,
            "description": "Simple Multiplayer Mode\n---------------\n\nWithin our mobile application, we have the potential to integrate with an asynchronous Multiplayer experience\ncurrently partnering with Skillz. This multiplayer experience works such that you can initiate the\nMultiplayer experience, which loads up the third party UI, allowing the user to join an asynchronous\ngaming tournament (which could be head to head, or n players, or play as many times in a given time frame to\nattempt to get the highest score). Once the game has made the choice to work in Multiplayer mode, it must\nbehave differently than normal, in such that the game is not listening to a user input for when the game\nshould start, or what type of level to show the user, but instead listen to callbacks from this API as to\nwhen a level should be started.\n\nDuring the progress of a level, the game should regularly report the user's current score (this could be\nevery n seconds, or whenever the score is increased). This is such that it is easier to determine if foul\nplay has come in to effect. Remember that users can and will be playing for REAL MONEY as well as virtual\ncurrency.\n\nThe typical flow would be to:\n* register the session started callback, to ensure that your game is notified of\nwhen the MP experience has determined the user is about to start a tournament\n* register the exit multiplayer callback, to ensure that the game is aware of what mode it should be working\nin\n* Either bind a button to the startMultiplayer (i.e. a Start Multiplayer Mode button on the UI), or if the\ngame is going to launch straight in to Multiplayer mode, to call startMultiplayer when it is fully configured\nand ready to start listening to the callbacks for the tournament session started.\n* When the callback to the session started has occurred, you should read the attributes passed in the object\nto callback function, to determine any configuration needed to be applied. For example a tournament may be\nconfigured to disable all collectible powerups, to further increase difficulty. The game session should then\nbegin.\n* During a game session, if you are playing in a Multiplayer session, you should report regularly the players\nscore, to ensure that foul play can be detected by the third party provider.\n* Once a game has completed, you should endSession with the users score. At this point the game should be\nprepared to receive a callback on either the session started callback, or the exiting multiplayer callback\n* If the game offers the ability, if the user ends their current game, it should call abortSession to notify\nthe third party the player has forfeited their tournament.\n\nIt should be noted that on the mobile application (but not on the desktop console), the\n<code>Math.random</code> object will be overridden with a slightly slower implementation. This implementation\nwill ensure that all players in a given ongoing tournament will have the same random seed at the start of\ntheir game session. This should mean that all players see the same initial state. Your game should not\n(unless explicitly required to do so) take any other factors in to account when attempting to use a random\nnumber (i.e. don't do Math.random() * 10000 + Date.now() - oldTimeStamp). In the case of a traditional\nMatch 3 game, this should mean that two players with the same seed, should be able to play identical moves\nand see identical elements on their board at each move. Scoring should not be using any random element, but\ncan use time (to reward faster activity for example).\n\nTo verify this behavior on a desktop console, append #!mpsimpledebug to the url of the console/game url:\nhttp://s.games.iwin.com/m/console/v_217/#/m/iwin/bubble-town-quest/v_117/#!mpsimpledebug\n\n\nThis indicates to the console that it should say that the iConsole.mp.simple.isSupported should return true,\nand allow for debug calls to be made on the Javascript Console.\n\n\nWhen your game implements the iConsole.mp.simple calls, you will see the javascript console report this:\n* iConsole.game.exitApplication - \"Game has requested to exit the application - unsupported on this client\"\n* iConsole.mp.simple.startMultiplayer - an Alert box will appear on screen\n* iConsole.mp.simple.reportScore - \"Game Score reported as XXX\" where XXX is the score\n* iConsole.mp.simple.abortSession - \"User aborted game, returning control to game in 5 seconds time\"\n* iConsole.mp.simple.endSession - \"Game finished with score XXX returning control to game in 5 seconds time\" where XXX is the score\n\n\nOnce you have called iConsole.mp.simple.startMultiplayer from the debug desktop javascript console, two\nmethods are available on the window object:\n<pre>\n// Call this function from the javascript console to pretend to initiate a new Multiplayer Tournament Session\n// You can pass in an object which can contain key/value pairs, which will be exposed to the sessionStarted\n// callback function\nwindow.startMPSimpleSession( {\n    tournamentParam1 : tournamentValue1,\n    ...\n    tournamentParamN : tournamentValueN\n} );\n\n// Call this function to pretend to exit out of the multiplayer experience from the third party.\nwindow.exitMP();\n</pre>",
            "type": "{iConsole.mp.simple|*|{}}"
        },
        "iConsole.periodical": {
            "name": "iConsole.periodical",
            "shortname": "iConsole.periodical",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/periodical.js",
            "line": 2,
            "description": "Periodical\n-------\nPeriodical game data (i.e. daily games) payload handling via the console.\n\nPeriodical files should be stored in a folder call periodical inside the parent of the game directory... i.e.\nin the folder beside site-console:\n   + game\n   + periodical\n   + site-console\n   ...\n\nWhen the game is released onto production, this folder sits alongside the\nversions of the game\n   + periodical\n   + v_72\n   + v_73\n   ...\n\nInside the periodical folder, should be a file periodical.json. It should contain in the root of the JSON, an\narray called \"periods\", which is an array of objects. Each of these objects should have at least a \"name\", a\n\"date\" in YYYYMMDD format, and a \"json\" which is a local reference to a given periods actual data file. You can\nprovide further details such as a thumbnail image here, but the data in this file should be kept to a minimum for\nonly information that is necessary to allow the user to choose the period The referenced JSON file should be used\nto store all the information about what the game needs to present a given periods data.\nperiodical.json:\n<pre>\n{\n   \"periods\": [\n\t\t{\n           \"json\": \"daily-test-140905-1.json\",\n\t\t\t\"name\": \"Test A\",\n\t\t\t\"date\": \"20140701\"\n       },\n       {\n           \"json\": \"daily-test-140905-2.json\",\n\t\t\t\"name\": \"Test B\",\n\t\t\t\"date\": \"20140630\"\n       },\n       {\n           \"json\": \"daily-test-140905-3.json\",\n\t\t\t\"name\": \"Test C\",\n\t\t\t\"date\": \"20140629\"\n       }\n   ]\n}\n</pre>\nThe data format for each periods json file is entirely at the games discretion, however, you are strongly\nrecommended to have a \"periodical\" object at the root of each periods data, and this should include everything\nyou need to represent this game to allow the user to choose that period (for example, the name of the puzzle,\na picture of that puzzle etc...). We have a process to take source data and convert this into data suited for\nlong life caching and better user browser performance, and it can automatically generate the parent periodical.json\nfile, and uses the \"periodical\" block in each periods data to generate the \"name\" and other data attributes\nneeded.\n\nOnce you have periodical data, you will need to alter the game_details.json file to have   <br/>\n\"periodical\": true   </br>\nset, in order for the console to consider your game a candidate for enabling periodical data (improper setting\nof this value either results in a volume of 404s, or periodical functions not working).\n\nInside the game, you can call:<pre>\niConsole.periodical.getPeriods().result( function( periodData ) {\n   // ...\n});\n</pre>\nWhich will return you the basic objects from the periodical.json file, including name and date (and any data you\nhave injected there).\n\nYou should use this data to allow the user to choose a period to play, and you should obtain an index from this\narray that the user has chosen. In order to download that data, you should then call:<pre>\niConsole.periodical.getData( indexInArrayThatWasChosen ).result( function( data ) {\n   // ...\n});\n</pre>\nIf any of your data contains URLs to assets relative to that periods data, such as images, you should call:<pre>\nvar realURItoCall = iConsole.periodical.getFileURI('myImage.jpg');\n</pre>\nprior to attempting to load these assets. This ensures that the correct location for these assets are used",
            "type": "{iConsole.periodical|*|{}}"
        },
        "iConsole.social": {
            "name": "iConsole.social",
            "shortname": "iConsole.social",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/social.js",
            "line": 3,
            "type": "{iConsole.social|*|{}}"
        },
        "iConsole.social.facebook": {
            "name": "iConsole.social.facebook",
            "shortname": "iConsole.social.facebook",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console-js/modules/social.js",
            "line": 16,
            "type": "{iConsole.social.facebook|*|{}}"
        }
    },
    "classitems": [
        {
            "file": "src/console-js/modules/ads.js",
            "line": 29,
            "description": "In order to flag an advert to potentially be shown, you call this function with appropriate data blocks as\ndefined below. You should pause your game play and mute any sound/music whilst the advert is displayed.\nYou will be notified via the <code>result</code> callback once the console has completed its advert display process.\nAt this point you should un mute and un pause your game.\n<br>\nIf you declare your data type to be <code>interstitial</code>, then the advert (currently) will be triggered\nalways. If you declare your data type to be <code>levelStarted</code>, then the advert may or may not fire\nbased upon the behaviour defined in the <code>game_details.json</code> file. If the advert isn't fired, the\n<code>result</code> is fired immediately. In this case, any code appearing on lines after this call will be\ncalled after the <code>result</code> callback is fired, whereas if the advert is fired, any code appearing on\nlines after this call will be called before the <code>result</code> is fired. Therefore, you should consider\npausing all game execution prior to this call, and leave this as the last call to make.",
            "params": [
                {
                    "name": "data",
                    "description": "An object which contains either\n<pre>\n{\n   type: 'interstitial'\n}\n</pre>\nto fire interstitial adverts all the time, or:\n<pre>\n{\n   type: 'levelStarted',\n   level: num\n}\n</pre>\nwhere <code>num</code> is the level number as an integer that the user is about to start playing. In this\ninstance the advert display behaviour is guided by the <code>game_details.json</code> file.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when the advert is dismissed. The format of result function is\n<pre>result( callbackFunction );</pre>\nWhere callbackFunction is a function that will be called with a single parameter, an object that currently is\nempty, when the advert has dismissed.",
                "type": "Object"
            },
            "example": [
                "\n<pre>\niConsole.ads.show( {\n   type: 'levelStarted',\n   level: 3\n} ).result( function( resultData ) {\n   myGame.startGameTimer();\n} );\n</pre>"
            ],
            "itemtype": "method",
            "name": "show",
            "class": "iConsole.ads"
        },
        {
            "file": "src/console-js/modules/ads.js",
            "line": 77,
            "description": "If your game has been configured to use mid game adverts (adverts that interrupt the users game play), then\nyou should register callbacks to determine when the console is about to show an advert. This will enable you\nto prepare the game in a paused state, pausing timers, fading screens down, waiting for the user to release\ntheir finger or mouse if it is depressed etc... and then notify the console that your game is in a state to\nsafely display adverts without impacting the user.\nYou can register multiple callbacks which will be fired (the order of which is not guaranteed), but one and\nonly one of these callbacks *MUST* fire the <pre>.result</pre> function.",
            "params": [
                {
                    "name": "callbackFunctionToRegister",
                    "description": "The function that you want to register to be called when the\nconsole is going to display an advert mid game. This function will be called with one parameter, an object\nwhich has a <pre>.result</pre> function that you should call when your game is ready to relinquish control to\nthe console for the advert",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the value of <pre>this</pre> that will be applied to the function if necessary.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<pre>\nvar myMidGameAdvertStartedCallback = function( request ) {\n    this.pause();\n    this.fadeDown();\n    this.waitForMouseUp(function() {\n        request.result();\n    });\n};\niConsole.ads.registerMidGameAdvertStartedListener( myMidGameAdvertStartedCallback, this );\n</pre>"
            ],
            "class": "iConsole.ads"
        },
        {
            "file": "src/console-js/modules/ads.js",
            "line": 106,
            "description": "If your game has been configured to use mid game adverts, the you should also register callbacks to have the\nconsole notify you that the advert has finished displaying, and that the console has relinquished control\nback to the game. This will enable you to display a resume countdown timer, fade the screen back up etc...",
            "params": [
                {
                    "name": "callbackFunctionToRegister",
                    "description": "The function that you want to register to be called when the\nconsole has relinquished control back to the game after the advert has completed. This function will be\ncalled without any parameters, as there is no need to notify the console that the game is continuing, the\nconsole assumes that once this request has been sent, the game is back in control.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the value of <pre>this</pre> that will be applied to the function if necessary.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<pre>\nvar myMidGameAdvertFinishedCallback = function( ) {\n    this.startResumeGameCountDownTimers();\n    this.fadeUp();\n};\niConsole.ads.registerMidGameAdvertFinishedListener( myMidGameAdvertFinishedCallback, this );\n</pre>"
            ],
            "class": "iConsole.ads"
        },
        {
            "file": "src/console-js/modules/ads.js",
            "line": 128,
            "description": "If your game supports mid game adverts, and you are applying these calls across multiple classes (i.e. each\nlevel is contained in a different class), then you should unregister any callbacks that you have made.\nOtherwise, the callbacks will be fired against all registered listeners and this may result in undesired\nbehaviour or complete crashes.",
            "params": [
                {
                    "name": "callbackFunctionToUnregister",
                    "description": "the previously registered function for\nregisterMidGameAdvertStartedListener to be unregistered",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\niConsole.ads.registerMidGameAdvertStartedListener( this.midgameAdvertStarted, this );\n...\niConsole.ads.unregisterMidGameAdvertStartedListener ( this.midgameAdvertStarted );\n</pre>"
            ],
            "class": "iConsole.ads"
        },
        {
            "file": "src/console-js/modules/ads.js",
            "line": 151,
            "description": "If your game supports mid game adverts, and you are applying these calls across multiple classes (i.e. each\nlevel is contained in a different class), then you should unregister any callbacks that you have made.\nOtherwise, the callbacks will be fired against all registered listeners and this may result in undesired\nbehaviour or complete crashes.",
            "params": [
                {
                    "name": "callbackFunctionToUnregister",
                    "description": "the previously registered function for\nregisterMidGameAdvertFinishedListener to be unregistered",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\niConsole.ads.registerMidGameAdvertFinishedListener( this.midgameAdvertStarted, this );\n...\niConsole.ads.unregisterMidGameAdvertFinishedListener ( this.midgameAdvertStarted );\n</pre>"
            ],
            "class": "iConsole.ads"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 58,
            "description": "This is the first call you need to make in order for the game and the console to start communicating with\neach other. This call will return an object that you'll need to register a callback handler with, that will\nbe triggered after the pre-game advert has dismissed. You will need to prevent game play taking place until\nthis callback has been triggered, otherwise the game will start playing with an advert sat on top.",
            "params": [
                {
                    "name": "data",
                    "description": "An object which declares what functions you support. If you support these functions\nyou should declare them as function:true... i.e. <pre>{ soundOnOff: true }</pre>. If you do not support these\nfunctions, then you do not need to declare them, as they are assumed to be unsupported.\nAllowable values are:\n* soundOnOff - Your game will register event handlers for soundOn and soundOff and handle appropriately\n* pauseable - Your game will register event handlers for pause and resume and handle appropriately\n* restartable - Your game will register event handlers for restart and handle appropriately",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when the advert is dismissed. The format of result function is\n<pre>result( callbackFunction );</pre>\nWhere callbackFunction is a function that will be called with a single parameter, an object that contains:\n* a key <code>user</code> that is an object of the user data\n* a key <code>console</code> that is an object containing:\n** a key <code>type</code> that is the type of console that is running, either <code>app</code> or <code>browser</code>\n** a key <code>provider</code> that is the provider handling the console",
                "type": "Object"
            },
            "example": [
                "\n<pre>\niConsole.game.ready({\n   soundOnOff: true,\n   pauseable: true,\n   supportedLanguages:\n}).result( function( resultData ) {\n   myGame.setConsoleType(resultData.console.type);\n   mygame.setConsoleProvider(resultData.console.provider);\n   myGame.showHomeScreenMenu(resultData.user);\n   \n} );\n</pre>"
            ],
            "itemtype": "method",
            "name": "ready",
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 97,
            "description": "While the game is loading all of it's assets, you should call this frequently to notify the user (via the\npre-game advert progress bar) of the game's loading progress. Typically games will pre-load the image /\naudio assets needed for the menu and first level of the game. Games may also use this time to pre-compile any\ndata blocks that may require a degree of time to complete",
            "params": [
                {
                    "name": "data",
                    "description": "an object contains mappings to:\n<br><code>progress</code> a floating point number from 0 to 1 that indicates the progress the game is making\nin preparing the game for presentation ot the user. At 1 (i.e. 100%) the game should be in a state (once the\npre-game advert has been dismissed) where the user can play or view a menu screen with no further loading\nscreens.\n<br><code>file</code> a string containing the file asset you are loading, or it can be a debug message to\nindicate what you are processing. If debug is enabled in the javascript console, the console will log out the\ngame loading percentage and this file name/message",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The return object is not needed."
            },
            "example": [
                "\n<pre>\niConsole.game.loadProgress( {\n   progress: 0.37,\n   file: 'music/background_music.mp3'\n} );\n</pre>"
            ],
            "itemtype": "method",
            "name": "loadProgress",
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 124,
            "description": "Once the game has finished loading all of it's assets you should call this method to notify the console that\nyou have completed loading of all game assets and pre-compilation. This is in addition to making an\n<code>iConsole.game.loadProgress( { progress: 1, file: '' } );</code> call. This call to\n<code>iConsole.game.loaded</code> indicates to the console that it should allow the user to dismiss the\npre-game advert (once the minimum advert time has passed), or if the maximum advert time has passed to\nimmediately dismiss the pre-game advert. This call will ultimately result in the callback function in\n<code>iConsole.game.ready</code> to be called.",
            "params": [
                {
                    "name": "data",
                    "description": "either:\n<pre>\n{\n   success: true\n}\n</pre>\nindicating that the game has successfully loaded, or\n<pre>\n{\n   success: false,\n   item: 'The item that caused the game to fail loading',\n   text: 'Any debug information that may help understand why the game failed to load'\n}\n</pre>\nindicating that the game failed to load, where item and text are both strings that are used to identify to\nthe console and developer why the game failed to load.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The return object is not needed.",
                "type": "*"
            },
            "example": [
                "\n<pre>\niConsole.game.loaded( {\n   success: true\n} );\n</pre>",
                "\n<pre>\niConsole.game.loaded( {\n   success: false,\n   item: 'audio/background_music.mp3',\n   text: 'Error fetching file'\n} );\n</pre>"
            ],
            "itemtype": "method",
            "name": "loaded",
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 169,
            "description": "This call should be made prior to starting a level, to obtain any data that the game has previously stored\nfor the level about to be played. This is useful to allow a user to continue game progress where they left\noff. Examples of this can include fetching the data of a previous level (to indicate what items a user has\nin their in-game inventory). This is an asynchronous call, as the data may need to be fetched from a back-end\nserver, thus the data is passed into a callback function that you must supply to the result function in the\nreturned object.\nYou should also make a call to <code>iConsole.ads.show</code> with the type set to <code>levelStarted</code>\nas well, and wait for both callbacks to complete before continuing on with the game. Suggested order would\nbe to call <code>iConsole.ads.show</code> first, and then call <code>iConsole.game.getLevelData</code> to\nensure that the user is presented with something that is the game just waiting, and only proceed once both\nof these functions have triggered their callback functions.",
            "params": [
                {
                    "name": "data",
                    "description": "\n<pre>\n{\n   level: <integer>\n}\n</pre>\nwhere the level number is any integer from -2147483647 to 2147483647 (-2147483648 is specially reserved)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when the user's level data is returned. The format of result function is\n<pre>result( callbackFunction );</pre>\nWhere callbackFunction is a function that will be called with a single parameter, an object that contains a\nkey <code>data</code> that is an object of the users data. Any other data other than the <code>data</code>\nthat may be returned in this object block is deprecated and should not be relied upon.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getLevelData",
            "example": [
                "\n<pre>\niConsole.game.getLevelData( { level: 23 } ).result( function ( resultData ) {\n   myGame.decipherUsersLevelInformation( resultData.data );\n} );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 207,
            "description": "This call should be made to store progress of a level (typically at the end of a level) via a 2k data string.\nThis is useful to allow a user to continue game progress where they left off or to restart previously failed\nlevels. Whilst this may result in a back-end call, this call can be made and no callback function required to\nhandle the result.",
            "params": [
                {
                    "name": "data",
                    "description": "\n<pre>\n{\n   level: <integer>\n   data: <string of up to 2048 characters>\n}\n</pre>\nwhere the level number is any integer from -2147483647 to 2147483647 (-2147483648 is specially reserved) and\nthe data is a string of up to 2048 characters to store, where the contents of this are freely under the\ncontrol of the game developer.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The return object is not required",
                "type": "*"
            },
            "itemtype": "method",
            "name": "setLevelData",
            "example": [
                "\n<pre>\niConsole.game.setLevelData( {\n   level: 24,\n   data: \"{rockets:2,specials:['trinity','primus']}\"\n} );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 236,
            "description": "This call can be made prior to starting a level or prior to starting a game, to obtain any data that the game\nhas previously stored for the entire game session and any previous information (such as my best score if the\ngame wishes to display that inside its UI). This is useful to allow a user to continue game progress where\nthey left off, for example by storing the current user level. This is an asynchronous call, as the data may\nneed to be fetched from a back-end server, thus the data is passed into a callback function that you must\nsupply to the result function in the returned object.",
            "params": [
                {
                    "name": "data",
                    "description": "not used but provided in case of future API changes",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when the user's game data is returned. The format of result function is\n<pre>result( callbackFunction );</pre>\nWhere callbackFunction is a function that will be called with a single parameter, an object that contains a\nkey <code>data</code> that is an object of the users data. Any other data other than the <code>data</code>\nthat may be returned in this object block is deprecated and should not be relied upon.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getGameData",
            "example": [
                "\n<pre>\niConsole.game.getGameData().result( function ( resultData ) {\n   myGame.decipherUsersGameInformation( resultData.data );\n} );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 263,
            "description": "This call should be made to store progress in a game session (typically at the end of a level) via a 2k data\nstring. This is useful to allow a user to continue game progress where they left off or to restart previously\nfailed levels. Whilst this may result in a back-end call, this call can be made and no callback function\nrequired to handle the result.",
            "params": [
                {
                    "name": "data",
                    "description": "\n<pre>\n{\n   data: <string of up to 2048 characters>\n}\n</pre>\nwhere the level number is any integer from -2147483647 to 2147483647 (-2147483648 is specially reserved) and\nthe data is a string of up to 2048 characters to store, where the contents of this are freely under the\ncontrol of the game developer.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The return object is not required",
                "type": "*"
            },
            "itemtype": "method",
            "name": "setGameData",
            "example": [
                "\n<pre>\niConsole.game.setGameData( {\n   data: \"{currentLevel:24}\"\n} );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 290,
            "description": "This call should be made whenever the game wishes to post a high score for the global leaderboards for the\nuser. In the future, the console may cause a dialog to appear to congratulate the user on their achievement\nand so the game should pause execution until the callback function that should be supplied to the\n<code>result</code> member function of the returned object has been called. Currently, this will be called\nimmediately.",
            "params": [
                {
                    "name": "data",
                    "description": "\n<pre>\n{\n   score: <integer>\n}\n</pre>\nwhere the score is an integer of the users high score they achieved.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when the high score has been posted and any console interaction\nresulting from this has completed. The format of result function is <pre>result( callbackFunction );</pre>\nWhere callbackFunction is a function that will be called with a single parameter, an object that currently\ncontains no data.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "postHighScore",
            "example": [
                "\n<pre>\niConsole.game.postHighScore( {\n   score: 945672\n} ).result( {\n   myGame.changeState(myGame.RESTART_GAME);\n} );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 322,
            "description": "This function should be called when the user has reached the end of a natural gaming session (i.e. they've\nrun out of lives and can not continue). Game play should not be allowed to continue until the result callback\nfunction has been called.",
            "itemtype": "method",
            "name": "gameOver",
            "example": [
                "\n<pre>\niConsole.game.gameOver().result( {\n   myGame.showMenuScreen();\n} );\n</pre>"
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 339,
            "itemtype": "method",
            "name": "levelStarted",
            "deprecated": true,
            "params": [
                {
                    "name": "info",
                    "description": ""
                }
            ],
            "return": {
                "description": "}",
                "type": "Result: result, trigger: trigger"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 378,
            "itemtype": "method",
            "name": "levelFinished",
            "deprecated": true,
            "params": [
                {
                    "name": "info",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 393,
            "description": "The user may generate keydown events when they are typing either in the game or in the console. Where the\nuser is typing into their chat window, keydown events are going to be triggered that games will erroneously\ncatch and handle. Therefore, instead of registering keydown handlers inside the game, you should add a\nhandler to the iConsole instead, which will bubble the keydown events except for when the user is typing into\nfields that shouldn't trigger game interaction, such as the chat window.\nThe currently supported event types are:\n* keydown - When a key is pressed down\n* signedIn - When a user signs in to the console (used to reload the user data from the console and restart the game)\n* signedOut - When a user signs out of the console (used to reload the user data and restart the game)\n* tiltYaxis - When a user tilts their amazon fire phone around the Y axis (used to dismiss menus in game)\n* soundOff - When the console requests to mute all sounds (the game should store the settings of the user overrides, so that if the sound is already muted, a call to soundOn should revert to the user settings)\n* soundOn - When the console requests to unmute all sounds (and where a game supports muting of sound effects and music separately, this should return the sound to the previous settings)\n* pause - When the console requests to pause the game, this should bring up the ingame pause menu (unless the game is not in a pause-able state)\n* resume - When the console requests to resume paused game play, this should unpause any paused game play (unless the game is not in a paused state)\n* restart - Only called if the console has received an iConsole.game.gameOver() call, and signifies that the console wants to do the same effect as the user clicking \"Replay\". However, if the user has already manually done this, then this should do nothing.\n* setlocale - If you support locales, you should consider adding support to iConsole.game.onEvent, with the setlocale event. If the user changes their locale during gaming session (the user may wish to change their supported language, this event will fire, and you should cater for updating the UI accordingly.\nSee iConsole.game.offEvent",
            "itemtype": "method",
            "name": "onEvent",
            "params": [
                {
                    "name": "eventType",
                    "description": "currently, the only supported event type is <code>keydown</code>",
                    "type": "String"
                },
                {
                    "name": "callbackFunction",
                    "description": "a callback function that will be called every time the console determines\na keydown event that should be passed to the game. It will be supplied with a cut down event object, that\ncontains two member variables <code>which</code> and <code>keyCode</code> and a function\n<code>stopPropagation</code> that can be used to prevent bubbling of the event within the game (if your game\nregisters multiple handlers to the console).",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\niConsole.game.onEvent( 'keydown', myGame.keydownHandler );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 445,
            "description": "The user may generate keydown events when they are typing either in the game or in the console. Where the\nuser is typing into their chat window, keydown events are going to be triggered that games will erroneously\ncatch and handle. Therefore, instead of registering keydown handlers inside the game, you should add a\nhandler to the iConsole instead, which will bubble the keydown events except for when the user is typing into\nfields that shouldn't trigger game interaction, such as the chat window. This call will be used to\nde-register the keydown handler.\nSee iConsole.game.onEvent",
            "itemtype": "method",
            "name": "offEvent",
            "params": [
                {
                    "name": "eventType",
                    "description": "currently, the only supported event type is <code>keydown</code>",
                    "type": "String"
                },
                {
                    "name": "callbackFunction",
                    "description": "the callback function that was previously registered with\n<code>iConsole.game.onEvent</code>",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\niConsole.game.offEvent( 'keydown', myGame.keydownHandler );\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 482,
            "description": "This function returns the width of the game inside the console, as window.innerWidth will not work initially\nwhen the game is first loaded as the game's window is hidden from display. This function is especially\nuseful when trying to determine what resolution of graphics the game should load.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 499,
            "description": "This function returns the height of the game inside the console, as window.innerHeight will not work initially\nwhen the game is first loaded as the game's window is hidden from display. This function is especially\nuseful when trying to determine what resolution of graphics the game should load.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 516,
            "description": "This function is used to set the label underneath the game's image on Amazon Fire devices (currently), and\nis typically used to relay information such as what level the user is going to resume playback from.",
            "itemtype": "method",
            "name": "setHomeWidgetLabel",
            "params": [
                {
                    "name": "label",
                    "description": "- The label to set, example 'Continue playing from level 5'  or 'Welcome Back Trooper', ..."
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 527,
            "description": "This function is used to explicitly to hide the console window (the chat and highscore window).",
            "itemtype": "method",
            "name": "hideConsoleWindow",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 536,
            "description": "This function is used to make a request to the console to allow it to inform the game which locale the user\nis expecting to use. The console will make the best guess from the locales you have provided which works best.\nThe locales should be given in LANGUAGE_COUNTRY format, i.e. en-US (case insensitive), and if the users\nlanguage matches, it will use that locale, falling back to the first language provided that supports the users\nlanguage (i.e. if the user has fr-CA as their locale, but you only offer fr-FR and fr-MZ, then it will return\nfr-FR), and where it cannot find a suitable language, attempts to use en-US if provided, and if that fails\nattempts to use, en, and if that fails it uses the first locale you have provided.\nIf you support locales, you should consider adding support to iConsole.game.onEvent, with the setlocale event.\nIf the user changes their locale during gaming session (the user may wish to change their supported language,\nthis event will fire, and you should cater for updating the UI accordingly.",
            "params": [
                {
                    "name": "locales",
                    "description": "- an array of string locales that the game supports. If you are offering multiple sets per\nlanguage, you should attempt to provide the largest populated language first (i.e. fr_FR over fr_CA). Use the\nfollowing page as an example <a href=\"http://www.localeplanet.com/icu/\">http://www.localeplanet.com/icu/</a>"
                }
            ],
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when the console has selected the most appropriate language. There may\nbe user interaction involved, so this is an asynchronous method. The format of result function is\n* <pre>result( callbackFunction );</pre> Where callbackFunction is a function that will be called with a\n* single parameter, an object that will contain a single key, locale which will be a string",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "requestLocale",
            "example": [
                "\n<pre>\niConsole.game.requestLocale( [ ‘en_US’, ’en_GB’, ’es_US’, ’fr_FR’, ’fr_CA’ ] ).result( function( data ){\n  myApplication.setLocale( data.locale );\n}\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/game.js",
            "line": 566,
            "description": "This function is used to indicate the game wishes to exit out of the application entirely. This is\neffectively a null operation for the desktop console, but on a mobile application, it will either exit the\ngame and return to the game selection menu for the multi game application, or in the case of a single game\napplication, will exit the application entirely. This is typically used in conjunction with the simple\nmultiplayer mode, where the game only supports multiplayer mode, and the user clicks to exit the multiplayer\nexperience.",
            "itemtype": "method",
            "name": "exitApplication",
            "example": [
                "\n<pre>\niConsole.game.exitApplication();\n</pre>"
            ],
            "class": "iConsole.game"
        },
        {
            "file": "src/console-js/modules/iap.js",
            "line": 198,
            "description": "This function should be used to feature detect whether In App Purchasing is available or not.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "iConsole.iap"
        },
        {
            "file": "src/console-js/modules/iap.js",
            "line": 207,
            "description": "This function should be used to initiate an In App Purchase from the containing platform. If the sku doesn't\nexist in the game_details.json, or in amazon's case, configured on their server this function will call the\nfailure callback.",
            "itemtype": "method",
            "name": "purchase",
            "params": [
                {
                    "name": "sku",
                    "description": "The sku item you wish to purchase",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object which contains two functions, success and failure, which should each be called\nwith the function you wish to call when the purchase succeeds or fails. These callbacks will be called with a\nsingle parameter, the sku that was attempted to be purchased. These calls can be directly chained:",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n    iConsole.iap.purchase('com.iwin.morelives').success(mySuccessFunction).failure(myFailureFunction);\n</pre>"
            ],
            "class": "iConsole.iap"
        },
        {
            "file": "src/console-js/modules/iap.js",
            "line": 246,
            "description": "This function should be used to feature detect whether external analytics (like Flurry) should be used for\nthe game. Note that if your game presents a different experience for an IAP game versus a non-IAP game, you\nshould store your analytic events accordingly.",
            "itemtype": "method",
            "name": "isAnalyticsSupported",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "iConsole.iap"
        },
        {
            "file": "src/console-js/modules/iap.js",
            "line": 257,
            "description": "This function will return the provider that the console is running under, which can be used to target\ndifferent analytics accounts",
            "itemtype": "method",
            "name": "getConsoleProvider",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "iConsole.iap"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 172,
            "description": "This function determines whether mutilplayer support has been enabled.\nIf you were expecting it to have been enabled check your game_details.json config w.r.t. multiplayer additions.\nFor most games this will return false.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isSupported",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 183,
            "description": "This function allows you to register a callback handler for each tick of game state. Game state is polled every n seconds.",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function you want to be called back on. The callback will receive a populated object as follows",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\n{\n  game_room_id: \"...\",                                                        //internal id of no use to you as a game developer\n  server_time: ...,                                                           //milliseconds since unix epoch\n  users: [                                                                    //users who are part of this room\n    { id: \"...\", nickname: \"...\",  avatar_url: \"...\" , state: { ... } }       //state is whatever you pass up\n    { ... }\n    { ... }\n  ]\n}\n</pre>"
            ],
            "itemtype": "method",
            "name": "registerGetState",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 205,
            "description": "This function should be used to initiate a user and assign him to the a Room in the multiplayer service.",
            "return": {
                "description": "An object which contains two functions, success and failure, which should each be called\nwith the function you wish to call when the assignment succeeds or fails. These calls can be directly chained:",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n    iConsole.mp.autoAssignUserToRoom().success(mySuccessFunction).failure(myFailureFunction);\n</pre>"
            ],
            "itemtype": "method",
            "name": "autoAssignUserToRoom",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 244,
            "description": "This function should be used to flag that the user has started playing the game at the point where lobby activities\nhave concluded and the game client feels it has enough users to begin.",
            "params": [
                {
                    "name": "options",
                    "description": "The method accepts an options object which may be expanded later with behaviours for how\nadditional users join the game once it has started.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object which contains two functions, success and failure, which should each be called\nwith the function you wish to call when the assignment succeeds or fails. These calls can be directly chained:",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n    iConsole.mp.gameStarted(options).success(mySuccessFunction).failure(myFailureFunction);\n</pre>"
            ],
            "itemtype": "method",
            "name": "gameStarted",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 261,
            "description": "This function should be used to flag that the game client has ended the game for all players.",
            "params": [
                {
                    "name": "options",
                    "description": "The method accepts an options object which may be expanded later with behaviours that\naffect what happens to the user at game end.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object which contains two functions, success and failure, which should each be called\nwith the function you wish to call when the assignment succeeds or fails. These calls can be directly chained:",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n    iConsole.mp.gameEnded(options).success(mySuccessFunction).failure(myFailureFunction);\n</pre>"
            ],
            "itemtype": "method",
            "name": "gameEnded",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 277,
            "description": "This function should be used to update the current players state - other game clients will be responsible for updating\ntheir own player's state.",
            "params": [
                {
                    "name": "state",
                    "description": "A small state object representing all the data about the user that other game clients need in order\nto display the status of that user, examples include board state in jewel quest, number of questions answered correctly\nin a quiz game and so on.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object which contains two functions, success and failure, which should each be called\nwith the function you wish to call when the assignment succeeds or fails. These calls can be directly chained:",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n    iConsole.mp.updateState({score: 45}).success(mySuccessFunction).failure(myFailureFunction);\n</pre>"
            ],
            "itemtype": "method",
            "name": "updateState",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 295,
            "description": "This function should be used by the game to set the players lobby state accordingly.\nFor example a user can be either 'playing'   or   'deciding'.\nMost players are 'waiting' when they join a room and remain in this state until the game determines it has enough users to start.\nAt this point each client should update their user into 'playing' state.\nThe user stays in this state until the user finishes their game, at which point they should be moved to 'finished' status.\nWhen you show the \"play again\"   or   \"leave room\" screen the user should be placed into a 'deciding' status.\nThis allows users to either play again or leave and prevents the game believing it has the correct number of users\nalready available to start the game.\nUsers in the 'finished' or 'deciding' status are still technically in the room and take up a players spot until they leave.\nOnce a user agrees to play again (or is automatically agreed to play again) they should be set to 'playing' status.",
            "params": [
                {
                    "name": "lobbyState",
                    "description": "must be either iConsole.mp.LOBBY_STATE_WAITING, iConsole.mp.LOBBY_STATE_PLAYING, iConsole.mp.LOBBY_STATE_FINISHED,\niConsole.mp.LOBBY_STATE_DECIDING",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object which contains two functions, success and failure, which should each be called\nwith the function you wish to call when the assignment succeeds or fails. These calls can be directly chained:",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n    iConsole.mp.updateUsersLobbyState(iConsole.mp.LOBBY_STATE_WAITING).success(mySuccessFunction).failure(myFailureFunction);\n</pre>"
            ],
            "itemtype": "method",
            "name": "updateUsersLobbyState",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 349,
            "description": "This function accepts the users passed to the  getState  callback handler and returns the current player's object.\nYou should check this response for null - which signifies that the current user could not be located.",
            "params": [
                {
                    "name": "allUsers",
                    "description": "an Array containing all the users",
                    "type": "Array"
                },
                {
                    "name": "voyeurUsers",
                    "description": "an Array containg all the voyeur users",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An object representing the user",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n    {\n       id: \"...\",                     //unique id to identify the user\n       nickname: \"...\",               //the nickname of a logged in user or Player#\n       avatar_url: \"...\",             //the avatar url of a logged in user\n       state: { score: 34 },          //state is whatever you pass up\n       type: \"real\",                  //type can be real, guest, voyeur\n       lobby_state: \"waiting\"         //lobby states can be waiting, playing, finished, deciding\n    }\n</pre>"
            ],
            "itemtype": "method",
            "name": "getCurrentPlayer",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 384,
            "description": "This function accepts the users passed to the  getState  callback handler and returns the other player objects.\nYou should check this response for being empty.\nNote the current user will never appear in this list...\nAlso note that when users leave a room at any point, they will not appear in the list returned here.\nThe game clients should keep track of which players were playing and their last recorded state and compare that with the list of players still playing.",
            "params": [
                {
                    "name": "allUsers",
                    "description": "an Array containing all the users",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array containing user objects",
                "type": "Array"
            },
            "example": [
                "\n<pre>\n  [                            //other users who are part of this room\n    {\n       id: \"...\",                     //unique id to identify the user\n       nickname: \"...\",               //the nickname of a logged in user or Player#\n       avatar_url: \"...\",             //the avatar url of a logged in user\n       state: { score: 34 },          //state is whatever you pass up\n       type: \"real\",                  //type can be real, guest, voyeur\n       lobby_state: \"waiting\"         //lobby states can be waiting, playing, finished, deciding\n    },\n    { ... },\n    { ... }\n  ]\n</pre>"
            ],
            "itemtype": "method",
            "name": "getOtherPlayers",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 421,
            "description": "This function accepts the users passed to the  getState  callback handler and returns the users waiting.",
            "params": [
                {
                    "name": "allUsers",
                    "description": "an Array containing all the users",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array containing user objects",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getWaitingUsers",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 432,
            "description": "This function accepts the users passed to the  getState  callback handler and returns the users playing.",
            "params": [
                {
                    "name": "allUsers",
                    "description": "an Array containing all the users",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array containing user objects",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getPlayingUsers",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 443,
            "description": "This function accepts the users passed to the  getState  callback handler and returns the users finished playing.",
            "params": [
                {
                    "name": "allUsers",
                    "description": "an Array containing all the users",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array containing user objects",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getFinishedUsers",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 454,
            "description": "This function accepts the users passed to the  getState  callback handler and returns the users deciding,\ni.e. still in the room but not yet agreed to play again.",
            "params": [
                {
                    "name": "allUsers",
                    "description": "an Array containing all the users",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array containing user objects",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getDecidingUsers",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 466,
            "description": "This function allows the game to show a button to allow the user to leave the game at any point in time.\nWhen called it will remove the user from the game.",
            "return": {
                "description": "An object which contains two functions, success and failure, which should each be called\nwith the function you wish to call when the assignment succeeds or fails. These calls can be directly chained:",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n    iConsole.mp.userLeftRoom().success(mySuccessFunction).failure(myFailureFunction);\n</pre>"
            ],
            "itemtype": "method",
            "name": "userLeftRoom",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 509,
            "description": "This function allows the game to show a button to allow the user to be added to a Room of his selection.",
            "params": [
                {
                    "name": "gameRoomId",
                    "description": "the id of the room where the user is going to be added in",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object which contains two functions, success and failure, which should each be called\nwith the function you wish to call when the assignment succeeds or fails. These calls can be directly chained:",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n    iConsole.mp.addUserToRoom(gameRoomId).success(mySuccessFunction).failure(myFailureFunction);\n</pre>"
            ],
            "itemtype": "method",
            "name": "addUserToRoom",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 553,
            "description": "This function allows the game to get a list of all the available rooms for the current game.",
            "return": {
                "description": "An object which contains two functions, success and failure, which should each be called\nwith the function you wish to call when the assignment succeeds or fails. These calls can be directly chained.\nThe success function requires a parameter where the rooms will be returned.",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n    iConsole.mp.getAvailableRooms().success(mySuccessFunction(rooms)).failure(myFailureFunction);\n</pre>"
            ],
            "itemtype": "method",
            "name": "getAvailableRooms",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 593,
            "description": "This function allows the game to create a new empty room.",
            "return": {
                "description": "An object which contains two functions, success and failure, which should each be called\nwith the function you wish to call when the assignment succeeds or fails. These calls can be directly chained.\nThe success function requires a parameter where the room created will be returned.",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n    iConsole.mp.createRoom().success(mySuccessFunction(room)).failure(myFailureFunction);\n\n    room = { \"id\": ​43, \"state\": \"waiting\", \"gameId\": \"mygame\", \"roomId\": \"mygame-gleamingsociety\", \"roomName\": \"Gleaming Society\" }\n</pre>"
            ],
            "itemtype": "method",
            "name": "createRoom",
            "class": "iConsole.mp"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 874,
            "description": "This asynchronous call should be made to feature flip your game into which mode it should operate in.",
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired shortly after this call. The format of result function is\n<pre>result( callbackFunction );</pre>\nWhere callbackFunction is a function that will be called with a single parameter, a boolean that will\ndetermine if Simple Multiplayer is supported or not.",
                "type": "Object"
            },
            "example": [
                "\n<pre>\niConsole.mp.simple.isSupported().result( function( supported ) {\n   if ( supported ) {\n     myGame.setUpForMultiPlayer();\n   } else {\n     myGame.setUpForSinglePlayer();\n   }\n} );\n</pre>"
            ],
            "itemtype": "method",
            "name": "isSupported",
            "class": "iConsole.mp.simple"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 907,
            "description": "Register a single callback function that should be called whenever the Multiplayer experience launches a\nnew Tournament session, and requires the game to configure itself accordingly, and then start playing the\ngame.",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function that will be called every time the Multiplayer\nexperience wants to start a new game session. This callback function will be passed an Object which\ncontains a number of values:\n<pre>\n{\n // A text description of the tournament\n matchDescription : \"eg: Practice before you go pro!\",\n\n // How much it cost in real cash to join the tournament\n entryCash : 0,\n\n // The tournament id\n id : 1855266,\n\n // The name of the tournament type\n name : \"Novice\",\n\n // The amount of virtual currency it cost the user to join the tournament\n entryPoints : 1,\n\n // The third party user (not to be confused with the iwin user)\n player : {\n     // User's ID\n     id : 49082,\n\n     // User's nick name\n     displayName : \"JudiciousTower\",\n\n     // a URL for a flag image for the users location\n     flagURL : \"https://cdn.sandbox.skillz.com/flags/US.png\",\n\n     // a URL for an image for their avatar\n     avatarURL : \"https://cdn.sandbox.skillz.com/default-profile-pics/Girl2_003.png\"\n },\n\n // A Flag to identify if this tournament is being played for cash (some tournaments may be offered for\n // a cash prize, but with virtual currency as the entry fee)\n isCash : false,\n\n // If configured in the third party, we can add multiple key value pairs to the tournament if required,\n // they would be listed in this object where XXX is the key name, and YYY is the value\n XXX : YYY\n}\n</pre>",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\niConsole.mp.simple.registerSessionStartedCallback( function( tournamentData ) {\n   myGame.resetGameBoard();\n   myGame.configureGameBoardForMultiplayer( tournamentData );\n   myGame.startGameSession();\n} );\n</pre>"
            ],
            "itemtype": "method",
            "name": "registerSessionStartedCallback",
            "class": "iConsole.mp.simple"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 968,
            "description": "Register a single callback function that should be called whenever the Multiplayer experience exits. This\nis typically done by a user action declaring through the third party, that they no longer wish to play\nthe current game in Multiplayer mode. If your game supports both modes of operation, you should return to\neither a single player mode, or a menu allowing the user to choose the type of play they want to do",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function that will be called every time the Multiplayer\nexperience wants to exit out of Multiplayer mode.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\niConsole.mp.simple.registerExitMultiplayerCallback( function() {\n   // Game supports Single Player mode\n   myGame.resetToSinglePlayerMode();\n} );\n</pre>",
                "\n<pre>\niConsole.mp.simple.registerExitMultiplayerCallback( function() {\n   // Game doesn't support Single Player mode\n   iConsole.game.exitApplication();\n} );\n</pre>"
            ],
            "itemtype": "method",
            "name": "registerExitMultiplayerCallback",
            "class": "iConsole.mp.simple"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 995,
            "description": "This function will launch the Multiplayer Experience, and launch the UI from the third party, which\nhandles virtual currency, tournament matching, user identity and launching etc. It should only be called\nonce you have registered your callbacks for session starting and exiting multiplayer mode. An example of\nwhen you would call this would either be as the result of a user clicking on a \"Play Multiplayer\" button,\nor as part of the game launching process when the game doesn't support Single Player.",
            "example": [
                "\n<pre>\nmyGame.buttons.multiPlayerMode.onClick = function() {\n   iConsole.mp.simple.startMultiplayer();\n};\n</pre>",
                "\n<pre>\niConsole.mp.simple.registerSessionStartedCallback(myGame.mpSessionStartedHandler);\niConsole.mp.simple.registerExitMultiplayerCallback(myGame.exitMPHandler);\niConsole.mp.startMultiplayer();\n</pre>"
            ],
            "itemtype": "method",
            "name": "startMultiplayer",
            "class": "iConsole.mp.simple"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 1019,
            "description": "This function should be called periodically by the game, when you are in a multiplayer gaming session,\nto update the third party with the user's current score.",
            "params": [
                {
                    "name": "score",
                    "description": "- the numeric score of the user"
                }
            ],
            "example": [
                "\n<pre>\nmyGame.updateScore = function(score) {\n    myGame.ui.refreshScore(score);\n    myGame.ui.animateProgressInLevel(score);\n    if (myGame.mpInProgress) {\n        iConsole.mp.simple.reportScore(score);\n    }\n}\n</pre>"
            ],
            "itemtype": "method",
            "name": "reportScore",
            "class": "iConsole.mp.simple"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 1039,
            "description": "This function should be called when the user has voluntarily exited out of the current game (i.e. give\nup). The game should expect to receive a callback on either the session started or exiting out of\nmultiplayer at some point after this call, when the user decides to either start a new game, or leave\nthe multiplayer experience altogether.",
            "example": [
                "\n<pre>\nmyGame.abortLevel = function() {\n    myGame.ui.showSadAnimation();\n    if (myGame.mpInProgress) {\n        myGame.mpInProgress = false;\n        iConsole.mp.simple.abortSession();\n    }\n}\n</pre>"
            ],
            "itemtype": "method",
            "name": "abortSession",
            "class": "iConsole.mp.simple"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 1060,
            "description": "This function should be called when the user has reached the end of their game session. The game should\nexpect to receive a callback on either the session started or exiting out of multiplayer at some point\nafter this call, when the user decides to either start a new game, or leave the multiplayer experience\naltogether.",
            "params": [
                {
                    "name": "score",
                    "description": "- the numeric score of the user"
                }
            ],
            "example": [
                "\n<pre>\nmyGame.completeLevel = function(score) {\n    myGame.ui.showCongratulationsAnimation();\n    if (myGame.mpInProgress) {\n        myGame.mpInProgress = false;\n        iConsole.mp.simple.endSession(score);\n    }\n}\n</pre>"
            ],
            "itemtype": "method",
            "name": "endSession",
            "class": "iConsole.mp.simple"
        },
        {
            "file": "src/console-js/modules/mp.js",
            "line": 1081,
            "description": "This asynchronous call can be used to determine if you are currently in a session. It is added more as a\nhelper function, as this is an asynchronous call, and will involve a degree of computational churn which\nshould be avoided if possible.",
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired shortly after this call. The format of result function is\n<pre>result( callbackFunction );</pre>\nWhere callbackFunction is a function that will be called with a single parameter, a boolean that will\ndetermine if a multiplayer session is in play or not.",
                "type": "Object"
            },
            "example": [
                "\n<pre>\niConsole.mp.simple.inSession().result( function( inSession ) {\n   if ( inSession ) {\n     myGame.mpInProgress = true;\n   } else {\n     myGame.mpInProgress = false;\n   }\n} );\n</pre>"
            ],
            "itemtype": "method",
            "name": "inSession",
            "class": "iConsole.mp.simple"
        },
        {
            "file": "src/console-js/modules/periodical.js",
            "line": 93,
            "description": "This function should be used to fetch the data for a given number of periods back. This will return exactly\nthe data as it has been stored in the JSON block (but this data may have been modified with filenames being\nchanged to support better caching). The data once loaded is called back in the .result(callback) callback\nfunction.",
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "periodsBack",
                    "description": ""
                }
            ],
            "return": {
                "description": "}",
                "type": "Result: Function"
            },
            "class": "iConsole.periodical"
        },
        {
            "file": "src/console-js/modules/periodical.js",
            "line": 125,
            "description": "This function should be used to fetch the total number of periods of data supported, and any data that is\nnecessary to display these periodicals, such as thumbnails. The data once obtained, is called back in the\n.result(callback) callback function.",
            "return": {
                "description": "}",
                "type": "Result: Function"
            },
            "itemtype": "method",
            "name": "getPeriods",
            "class": "iConsole.periodical"
        },
        {
            "file": "src/console-js/modules/periodical.js",
            "line": 154,
            "description": "If there are any assets which are referenced by the given periodical data, this will not be under the same\ndirectory as the game, and this function should be called to convert a given URI you wish to obtain into a\nURI that can be reached. This should be done for every URL referenced by the periodical data, that is meant\nto be local to the JSON file.",
            "params": [
                {
                    "name": "uri",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getFileURI",
            "class": "iConsole.periodical"
        },
        {
            "file": "src/console-js/modules/social.js",
            "line": 21,
            "description": "This method should be called to explicitly request a login to facebook. The result function that is\nreturned will be called with a value of either the user ID of who logged in, or null if the user isn't\nlogged in. If the user is already logged in, they won't be presented with a login dialog.\nNOTE\nIn the desktop console, this will request a login, but the callback will no later than 15 seconds after\ncalling, as there is no way through our current integration to determine exactly if / when a user has\nsigned in through this call.",
            "itemtype": "method",
            "name": "requestLogin",
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when facebook has responded. The format of result function is\n* <pre>result( callbackFunction );</pre> Where callbackFunction is a function that will be called with a\n* single parameter, the user's facebook ID or null if not logged in",
                "type": "*"
            },
            "example": [
                "\n<pre>\niConsole.social.facebook.requestLogin().result( function( userID ) {\n    if ( userID ) {\n        myGame.recordSignedIn( userID );\n    } else {\n        myGame.restartLevel();\n    }\n});\n</pre>"
            ],
            "class": "iConsole.social.facebook"
        },
        {
            "file": "src/console-js/modules/social.js",
            "line": 55,
            "description": "Request a share dialog is opened to share the current game/application. Games running in the normal\nconsole should not (currently) make this call, as the URL that will be shared will not allow the game to\nlaunch. However, games running in exclusive mode in a dedicated app should make this call.",
            "itemtype": "method",
            "name": "requestShare",
            "params": [
                {
                    "name": "data",
                    "description": "An object which must contain a key pair for 'message', the message you want to share with\nusers who are playing"
                }
            ],
            "return": {
                "description": "An object that contains a member function <code>result</code> that you should call with a\ncallback function that will be fired when facebook has responded. This callback function will be called\nwith a single parameter, which will be an object with a success value of either true or false.",
                "type": "*"
            },
            "example": [
                "\n<pre>\niConsole.social.facebook.requestShare( { message : 'Come play our awesome game' } ).result( function( data ) {\n    if (data.success) {\n        myGame.thankUserForSharing();\n    } else {\n        myGame.restartLevel();\n    }\n});\n</pre>"
            ],
            "class": "iConsole.social.facebook"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/console-js/modules/iap.js:257"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/console-js/modules/social.js:21"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/console-js/modules/social.js:55"
        },
        {
            "message": "Missing item type\nIf your game has been configured to use mid game adverts (adverts that interrupt the users game play), then\nyou should register callbacks to determine when the console is about to show an advert. This will enable you\nto prepare the game in a paused state, pausing timers, fading screens down, waiting for the user to release\ntheir finger or mouse if it is depressed etc... and then notify the console that your game is in a state to\nsafely display adverts without impacting the user.\nYou can register multiple callbacks which will be fired (the order of which is not guaranteed), but one and\nonly one of these callbacks *MUST* fire the <pre>.result</pre> function.",
            "line": " src/console-js/modules/ads.js:77"
        },
        {
            "message": "Missing item type\nIf your game has been configured to use mid game adverts, the you should also register callbacks to have the\nconsole notify you that the advert has finished displaying, and that the console has relinquished control\nback to the game. This will enable you to display a resume countdown timer, fade the screen back up etc...",
            "line": " src/console-js/modules/ads.js:106"
        },
        {
            "message": "Missing item type\nIf your game supports mid game adverts, and you are applying these calls across multiple classes (i.e. each\nlevel is contained in a different class), then you should unregister any callbacks that you have made.\nOtherwise, the callbacks will be fired against all registered listeners and this may result in undesired\nbehaviour or complete crashes.",
            "line": " src/console-js/modules/ads.js:128"
        },
        {
            "message": "Missing item type\nIf your game supports mid game adverts, and you are applying these calls across multiple classes (i.e. each\nlevel is contained in a different class), then you should unregister any callbacks that you have made.\nOtherwise, the callbacks will be fired against all registered listeners and this may result in undesired\nbehaviour or complete crashes.",
            "line": " src/console-js/modules/ads.js:151"
        }
    ]
}